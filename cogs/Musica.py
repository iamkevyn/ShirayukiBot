# /home/ubuntu/ShirayukiBot/cogs/Musica.py
# Cog de M√∫sica reescrita para usar Mafic

import nextcord
from nextcord import Interaction, SlashOption, ChannelType
from nextcord.ext import commands
import mafic
import logging
import asyncio
import re
from typing import Optional, List, Union

logger = logging.getLogger("discord_bot.musica_mafic")

# Regex para validar URLs do YouTube e Soundcloud, e termos de busca
URL_REGEX = re.compile(
    r"^(?:(?:https?:)?//)?(?:www\.)?"
    r"(?:(?:youtube\.com/(?:watch\?v=|embed/|v/|shorts/|playlist\?list=))"
    r"|(?:youtu\.be/)|(?:soundcloud\.com/[^/]+(?:/(?:sets/)?/[^/]+)?))"
    r"([a-zA-Z0-9_-]+)"
)
SEARCH_TERM_REGEX = re.compile(r"^.{3,500}$") # Termos de busca gen√©ricos

class PlayerControls(nextcord.ui.View):
    def __init__(self, player: mafic.Player, cog_instance):
        super().__init__(timeout=None) # Controles persistentes
        self.player = player
        self.cog = cog_instance

    @nextcord.ui.button(label="‚èØÔ∏è Pausar/Continuar", style=nextcord.ButtonStyle.primary, row=0)
    async def pause_resume(self, button: nextcord.ui.Button, interaction: Interaction):
        if not self.player or not self.player.current:
            await interaction.response.send_message("N√£o h√° nada tocando para pausar/continuar.", ephemeral=True)
            return

        if self.player.paused:
            await self.player.resume()
            await interaction.response.send_message("‚ñ∂Ô∏è M√∫sica retomada!", ephemeral=True)
        else:
            await self.player.pause()
            await interaction.response.send_message("‚è∏Ô∏è M√∫sica pausada!", ephemeral=True)
        await self.cog.update_now_playing_message(self.player)

    @nextcord.ui.button(label="‚è≠Ô∏è Pular", style=nextcord.ButtonStyle.secondary, row=0)
    async def skip(self, button: nextcord.ui.Button, interaction: Interaction):
        if not self.player or not self.player.current:
            await interaction.response.send_message("N√£o h√° nada tocando para pular.", ephemeral=True)
            return
        await self.player.stop() # Mafic lida com a pr√≥xima m√∫sica da fila automaticamente
        await interaction.response.send_message("‚è≠Ô∏è M√∫sica pulada!", ephemeral=True)
        # A mensagem de "agora tocando" ser√° atualizada pelo evento on_track_end/on_track_start

    @nextcord.ui.button(label="‚èπÔ∏è Parar e Limpar", style=nextcord.ButtonStyle.danger, row=0)
    async def stop_clear(self, button: nextcord.ui.Button, interaction: Interaction):
        if not self.player:
            await interaction.response.send_message("O player n√£o est√° ativo.", ephemeral=True)
            return

        self.player.queue.clear()
        await self.player.stop() # Para a m√∫sica atual
        
        try:
            await self.player.disconnect(force=True) # Desconecta do canal de voz
        except Exception as e:
            logger.error(f"Erro ao desconectar player para guild {interaction.guild_id}: {e}")

        # Remove o player da lista do cog
        if interaction.guild_id in self.cog.players:
            del self.cog.players[interaction.guild_id]

        await interaction.response.send_message("‚èπÔ∏è Player parado, fila limpa e bot desconectado.", ephemeral=True)

        if self.cog.now_playing_messages.get(interaction.guild_id):
            try:
                msg_id, channel_id = self.cog.now_playing_messages[interaction.guild_id]
                channel = self.cog.bot.get_channel(channel_id)
                if channel:
                    message = await channel.fetch_message(msg_id)
                    await message.edit(content="Player desconectado. Use `/tocar` para iniciar novamente.", view=None, embed=None)
                del self.cog.now_playing_messages[interaction.guild_id]
            except nextcord.NotFound:
                logger.warning(f"Mensagem 'agora tocando' n√£o encontrada para guild {interaction.guild_id} ao parar.")
            except Exception as e:
                logger.error(f"Erro ao limpar mensagem 'agora tocando' para guild {interaction.guild_id}: {e}")

    @nextcord.ui.button(label="üîÅ Loop Faixa/Fila/Off", style=nextcord.ButtonStyle.secondary, row=1)
    async def loop_mode(self, button: nextcord.ui.Button, interaction: Interaction):
        if not self.player:
            await interaction.response.send_message("O player n√£o est√° ativo.", ephemeral=True)
            return

        current_loop_mode = self.player.loop
        if current_loop_mode == mafic.LoopType.NONE:
            self.player.loop = mafic.LoopType.TRACK
            await interaction.response.send_message("üîÅ Loop da faixa atual ativado!", ephemeral=True)
        elif current_loop_mode == mafic.LoopType.TRACK:
            self.player.loop = mafic.LoopType.QUEUE
            await interaction.response.send_message("üîÅ Loop da fila ativado!", ephemeral=True)
        elif current_loop_mode == mafic.LoopType.QUEUE:
            self.player.loop = mafic.LoopType.NONE
            await interaction.response.send_message("üîÅ Loop desativado!", ephemeral=True)
        await self.cog.update_now_playing_message(self.player)

    @nextcord.ui.button(label="üîÄ Shuffle", style=nextcord.ButtonStyle.secondary, row=1)
    async def shuffle_queue(self, button: nextcord.ui.Button, interaction: Interaction):
        if not self.player or not self.player.queue:
            await interaction.response.send_message("A fila est√° vazia para embaralhar.", ephemeral=True)
            return
        self.player.queue.shuffle()
        await interaction.response.send_message("üîÄ Fila embaralhada!", ephemeral=True)
        await self.cog.update_now_playing_message(self.player) # Para atualizar a exibi√ß√£o da fila se estiver vis√≠vel

class Musica(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.players = {}  # guild_id: mafic.Player
        self.now_playing_messages = {}  # guild_id: (message_id, channel_id)
        logger.info("--- [COG MUSICA MAFIC] Cog Musica (Mafic) inicializada ---")

    async def get_player(self, interaction: Interaction) -> Optional[mafic.Player]:
        """Obt√©m ou cria um player para o servidor."""
        if interaction.guild_id in self.players:
            # Verifica se o player ainda est√° conectado, caso contr√°rio, tenta reconectar ou limpar
            player = self.players[interaction.guild_id]
            if not player.connected:
                logger.warning(f"Player para guild {interaction.guild_id} encontrado mas n√£o conectado. Tentando limpar.")
                try:
                    await player.destroy()
                except Exception as e_destroy:
                    logger.error(f"Erro ao tentar destruir player desconectado para guild {interaction.guild_id}: {e_destroy}")
                del self.players[interaction.guild_id]
            else:
                return player

        if not interaction.guild or not interaction.user.voice or not interaction.user.voice.channel:
            await interaction.response.send_message("Voc√™ precisa estar em um canal de voz para usar os comandos de m√∫sica.", ephemeral=True)
            return None

        if not hasattr(self.bot, "mafic_pool") or not self.bot.mafic_pool:
            logger.error("Mafic NodePool n√£o encontrado no bot. O setup_hook do bot falhou?")
            await interaction.response.send_message("Erro cr√≠tico: O sistema de m√∫sica n√£o est√° inicializado corretamente (NodePool).", ephemeral=True)
            return None

        try:
            # Conecta ao canal de voz e cria o player
            logger.info(f"Tentando conectar ao canal de voz: {interaction.user.voice.channel.name} (ID: {interaction.user.voice.channel.id}) para guild {interaction.guild_id}")
            player: mafic.Player = await interaction.user.voice.channel.connect(cls=mafic.Player)
            logger.info(f"Conectado ao canal de voz. Player: {player}")

            # Tenta definir self_deaf ap√≥s a conex√£o
            if player and player.guild and player.guild.me:
                try:
                    await player.guild.me.edit(deafen=True)
                    logger.info(f"Bot definido como surdo no canal para guild {interaction.guild_id}")
                except Exception as e_deafen:
                    logger.warning(f"N√£o foi poss√≠vel definir o bot como surdo para guild {interaction.guild_id}: {e_deafen}")
            else:
                logger.warning(f"N√£o foi poss√≠vel definir o bot como surdo: player, guild ou guild.me n√£o dispon√≠veis ap√≥s conex√£o. Guild ID: {interaction.guild_id}")
            
            self.players[interaction.guild_id] = player
            logger.info(f"Player criado e armazenado para guild {interaction.guild_id} no canal {interaction.user.voice.channel.name}")
            return player
        except mafic.NoNodesAvailable:
            await interaction.response.send_message("Nenhum n√≥ Lavalink dispon√≠vel para conectar. Tente novamente mais tarde.", ephemeral=True)
            logger.error("Falha ao conectar: Nenhum n√≥ Lavalink dispon√≠vel.")
            return None
        except Exception as e:
            await interaction.response.send_message(f"Erro ao conectar ao canal de voz: {e}", ephemeral=True)
            logger.error(f"Erro ao conectar ao canal de voz para guild {interaction.guild_id}: {e}", exc_info=True)
            return None

    @nextcord.slash_command(name="tocar", description="Toca uma m√∫sica ou adiciona √† fila. Use URL ou nome da m√∫sica.")
    async def play(
        self, 
        interaction: Interaction, 
        busca: str = SlashOption(
            name="musica_ou_url", 
            description="Nome da m√∫sica, URL do YouTube/SoundCloud ou playlist.", 
            required=True
        )
    ):
        """Comando para tocar m√∫sica."""
        await interaction.response.defer(ephemeral=False) # Deferir para dar tempo de processar

        try:
            player = await self.get_player(interaction)
            if not player:
                # get_player j√° envia mensagem de erro, ent√£o n√£o precisa enviar outra aqui
                # Apenas verificamos se a intera√ß√£o j√° foi respondida para evitar erro.
                if not interaction.response.is_done():
                    await interaction.followup.send("N√£o foi poss√≠vel obter o player de m√∫sica.", ephemeral=True)
                return

            # Verifica se √© uma URL v√°lida ou um termo de busca
            is_url = bool(URL_REGEX.match(busca))
            is_search_term = bool(SEARCH_TERM_REGEX.match(busca)) and not is_url

            tracks: Union[mafic.Playlist, List[mafic.Track], None] = None
            source_type = mafic.Source.YOUTUBE # Padr√£o para busca

            if is_url:
                logger.info(f"Buscando por URL: {busca} para guild {interaction.guild_id}")
                if "soundcloud.com" in busca:
                    source_type = mafic.Source.SOUNDCLOUD
                # Para URLs, incluindo playlists, fetch_tracks √© geralmente o melhor
                tracks = await player.fetch_tracks(busca, source_type=None) # Deixa Mafic decidir a fonte pela URL
            elif is_search_term:
                logger.info(f"Buscando por termo: {busca} para guild {interaction.guild_id}")
                # Para termos de busca, usamos search_tracks e especificamos a fonte (ou deixamos padr√£o)
                tracks = await player.search_tracks(query=busca, source=source_type) 
            else:
                await interaction.followup.send("Entrada inv√°lida. Por favor, forne√ßa uma URL v√°lida (YouTube/SoundCloud) ou um termo de busca (3-500 caracteres).", ephemeral=True)
                return

            if not tracks:
                await interaction.followup.send(f"Nenhuma m√∫sica encontrada para: `{busca}`", ephemeral=True)
                return

            added_to_queue_count = 0
            first_track_title = ""

            if isinstance(tracks, mafic.Playlist):
                player.queue.extend(tracks.tracks)
                added_to_queue_count = len(tracks.tracks)
                first_track_title = tracks.name # Nome da playlist
                await interaction.followup.send(f"üé∂ Playlist **{tracks.name}** ({added_to_queue_count} m√∫sicas) adicionada √† fila!", ephemeral=False)
            elif isinstance(tracks, list) and tracks: # Lista de faixas (resultado de busca)
                if is_search_term: # Se foi uma busca, geralmente pegamos a primeira e adicionamos
                    track_to_add = tracks[0]
                    player.queue.append(track_to_add)
                    added_to_queue_count = 1
                    first_track_title = track_to_add.title
                    await interaction.followup.send(f"üéµ **{track_to_add.title}** adicionada √† fila!", ephemeral=False)
                else: # Se foi uma URL de faixa √∫nica que retornou uma lista (improv√°vel, mas para cobrir)
                    player.queue.extend(tracks)
                    added_to_queue_count = len(tracks)
                    first_track_title = tracks[0].title
                    await interaction.followup.send(f"üéµ **{tracks[0].title}** ({added_to_queue_count} m√∫sica(s)) adicionada(s) √† fila!", ephemeral=False)
            else:
                await interaction.followup.send(f"N√£o foi poss√≠vel processar o resultado para: `{busca}`", ephemeral=True)
                return

            if not player.current and player.queue:
                await player.play(player.queue.pop(0), start_time=0) # Inicia a primeira m√∫sica da fila
                # A mensagem de "agora tocando" ser√° tratada por on_track_start
            elif player.current and added_to_queue_count > 0:
                # Se j√° est√° tocando e algo foi adicionado, a mensagem de "agora tocando" pode ser atualizada
                # para refletir a fila, se a view estiver ativa.
                await self.update_now_playing_message(player)
        except mafic.errors.HTTPNotFound as e:
            logger.error(f"Erro HTTP 404 do Lavalink: {e}")
            await interaction.followup.send("Erro de conex√£o com o servidor de m√∫sica. Tente novamente mais tarde.", ephemeral=True)
        except nextcord.errors.InteractionResponded:
            logger.warning("Intera√ß√£o j√° respondida durante o comando /tocar")
        except Exception as e:
            logger.error(f"Erro inesperado no comando /tocar: {e}", exc_info=True)
            try:
                await interaction.followup.send(f"Ocorreu um erro inesperado: {e}", ephemeral=True)
            except:
                pass

    async def update_now_playing_message(self, player: mafic.Player):
        if not player.guild_id or not player.current:
            return

        message_info = self.now_playing_messages.get(player.guild_id)
        if not message_info:
            return

        msg_id, channel_id = message_info
        channel = self.bot.get_channel(channel_id)
        if not channel or not isinstance(channel, nextcord.TextChannel):
            logger.warning(f"Canal n√£o encontrado ou n√£o √© canal de texto para guild {player.guild_id} ao atualizar NP.")
            return

        try:
            message = await channel.fetch_message(msg_id)
        except nextcord.NotFound:
            logger.warning(f"Mensagem 'agora tocando' (ID: {msg_id}) n√£o encontrada para guild {player.guild_id} ao atualizar.")
            # Se a mensagem n√£o existe mais, talvez criar uma nova? Ou apenas limpar.
            del self.now_playing_messages[player.guild_id]
            return
        except Exception as e:
            logger.error(f"Erro ao buscar mensagem 'agora tocando' para guild {player.guild_id}: {e}")
            return

        current_track = player.current
        embed = nextcord.Embed(
            title=f"üé∂ Tocando Agora", 
            description=f"**[{current_track.title}]({current_track.uri})**", 
            color=nextcord.Color.blue()
        )
        embed.add_field(name="Dura√ß√£o", value=self.format_duration(current_track.length), inline=True)
        embed.add_field(name="Autor", value=current_track.author, inline=True)
        
        loop_status = "Desativado"
        if player.loop == mafic.LoopType.TRACK: loop_status = "Faixa Atual"
        elif player.loop == mafic.LoopType.QUEUE: loop_status = "Fila Inteira"
        embed.add_field(name="Loop", value=loop_status, inline=True)

        if current_track.artwork_url:
            embed.set_thumbnail(url=current_track.artwork_url)
        
        queue_display = []
        if player.queue:
            for i, item in enumerate(player.queue[:5]): # Mostra as pr√≥ximas 5
                queue_display.append(f"{i+1}. {item.title} ({self.format_duration(item.length)})")
        
        embed.add_field(name=f"Pr√≥ximas na Fila ({len(player.queue)})", value="\n".join(queue_display) if queue_display else "Fila vazia", inline=False)
        
        # Corrigido o problema de aspas na f-string
        embed.set_footer(text=f"Adicionado por: {current_track.requester.display_name if current_track.requester else 'Desconhecido'}", 
                         icon_url=current_track.requester.display_avatar.url if current_track.requester else self.bot.user.display_avatar.url)

        try:
            await message.edit(content=None, embed=embed, view=PlayerControls(player, self))
        except Exception as e:
            logger.error(f"Erro ao atualizar mensagem 'agora tocando' para guild {player.guild_id}: {e}")

    def format_duration(self, milliseconds: int) -> str:
        """Formata dura√ß√£o de milissegundos para HH:MM:SS ou MM:SS."""
        if milliseconds is None: return "N/A"
        seconds = milliseconds // 1000
        minutes, seconds = divmod(seconds, 60)
        hours, minutes = divmod(minutes, 60)
        if hours > 0:
            return f"{hours:02d}:{minutes:02d}:{seconds:02d}"
        return f"{minutes:02d}:{seconds:02d}"

    @nextcord.slash_command(name="fila", description="Mostra a fila de m√∫sicas atual.")
    async def queue(self, interaction: Interaction):
        """Comando para mostrar a fila de m√∫sicas."""
        if not interaction.guild_id or interaction.guild_id not in self.players:
            await interaction.response.send_message("N√£o h√° player de m√∫sica ativo neste servidor.", ephemeral=True)
            return

        player = self.players[interaction.guild_id]
        if not player.connected:
            await interaction.response.send_message("O player de m√∫sica n√£o est√° conectado a um canal de voz.", ephemeral=True)
            return

        embed = nextcord.Embed(
            title="üéµ Fila de M√∫sicas",
            color=nextcord.Color.blue()
        )

        # Informa√ß√µes da m√∫sica atual
        if player.current:
            embed.add_field(
                name="üé∂ Tocando Agora",
                value=f"**[{player.current.title}]({player.current.uri})** ({self.format_duration(player.current.length)})\n"
                      f"Adicionado por: {player.current.requester.mention if player.current.requester else 'Desconhecido'}",
                inline=False
            )
        else:
            embed.add_field(
                name="üé∂ Tocando Agora",
                value="Nada tocando no momento.",
                inline=False
            )

        # Lista de m√∫sicas na fila
        if player.queue:
            queue_list = []
            for i, track in enumerate(player.queue[:10]):  # Limita a 10 m√∫sicas para n√£o sobrecarregar o embed
                requester = track.requester.mention if track.requester else "Desconhecido"
                queue_list.append(f"**{i+1}.** [{track.title}]({track.uri}) ({self.format_duration(track.length)}) - {requester}")
            
            remaining = len(player.queue) - 10
            queue_text = "\n".join(queue_list)
            if remaining > 0:
                queue_text += f"\n\n*E mais {remaining} m√∫sica(s)...*"
            
            embed.add_field(
                name=f"üìã Pr√≥ximas na Fila ({len(player.queue)})",
                value=queue_text,
                inline=False
            )
        else:
            embed.add_field(
                name="üìã Pr√≥ximas na Fila",
                value="A fila est√° vazia. Adicione m√∫sicas com `/tocar`!",
                inline=False
            )

        # Informa√ß√µes adicionais
        loop_status = "Desativado"
        if player.loop == mafic.LoopType.TRACK: loop_status = "Faixa Atual"
        elif player.loop == mafic.LoopType.QUEUE: loop_status = "Fila Inteira"
        
        embed.add_field(name="üîÅ Loop", value=loop_status, inline=True)
        embed.add_field(name="üîä Volume", value=f"{player.volume}%", inline=True)
        
        if player.paused:
            embed.add_field(name="‚è∏Ô∏è Status", value="Pausado", inline=True)
        else:
            embed.add_field(name="‚ñ∂Ô∏è Status", value="Tocando", inline=True)

        await interaction.response.send_message(embed=embed)

    @nextcord.slash_command(name="pular", description="Pula para a pr√≥xima m√∫sica na fila.")
    async def skip(self, interaction: Interaction):
        """Comando para pular a m√∫sica atual."""
        if not interaction.guild_id or interaction.guild_id not in self.players:
            await interaction.response.send_message("N√£o h√° player de m√∫sica ativo neste servidor.", ephemeral=True)
            return

        player = self.players[interaction.guild_id]
        if not player.connected or not player.current:
            await interaction.response.send_message("N√£o h√° nada tocando para pular.", ephemeral=True)
            return

        await player.stop()  # Mafic lida com a pr√≥xima m√∫sica da fila automaticamente
        await interaction.response.send_message("‚è≠Ô∏è M√∫sica pulada!")
        # A mensagem de "agora tocando" ser√° atualizada pelo evento on_track_end/on_track_start

    @nextcord.slash_command(name="pausar", description="Pausa a m√∫sica atual.")
    async def pause(self, interaction: Interaction):
        """Comando para pausar a m√∫sica atual."""
        if not interaction.guild_id or interaction.guild_id not in self.players:
            await interaction.response.send_message("N√£o h√° player de m√∫sica ativo neste servidor.", ephemeral=True)
            return

        player = self.players[interaction.guild_id]
        if not player.connected or not player.current:
            await interaction.response.send_message("N√£o h√° nada tocando para pausar.", ephemeral=True)
            return

        if player.paused:
            await interaction.response.send_message("A m√∫sica j√° est√° pausada. Use `/continuar` para retomar.", ephemeral=True)
            return

        await player.pause()
        await interaction.response.send_message("‚è∏Ô∏è M√∫sica pausada!")
        await self.update_now_playing_message(player)

    @nextcord.slash_command(name="continuar", description="Continua a m√∫sica pausada.")
    async def resume(self, interaction: Interaction):
        """Comando para continuar a m√∫sica pausada."""
        if not interaction.guild_id or interaction.guild_id not in self.players:
            await interaction.response.send_message("N√£o h√° player de m√∫sica ativo neste servidor.", ephemeral=True)
            return

        player = self.players[interaction.guild_id]
        if not player.connected or not player.current:
            await interaction.response.send_message("N√£o h√° nada tocando para continuar.", ephemeral=True)
            return

        if not player.paused:
            await interaction.response.send_message("A m√∫sica j√° est√° tocando. Use `/pausar` para pausar.", ephemeral=True)
            return

        await player.resume()
        await interaction.response.send_message("‚ñ∂Ô∏è M√∫sica retomada!")
        await self.update_now_playing_message(player)

    @nextcord.slash_command(name="parar", description="Para a m√∫sica e limpa a fila.")
    async def stop(self, interaction: Interaction):
        """Comando para parar a m√∫sica e limpar a fila."""
        if not interaction.guild_id or interaction.guild_id not in self.players:
            await interaction.response.send_message("N√£o h√° player de m√∫sica ativo neste servidor.", ephemeral=True)
            return

        player = self.players[interaction.guild_id]
        if not player.connected:
            await interaction.response.send_message("O player de m√∫sica n√£o est√° conectado a um canal de voz.", ephemeral=True)
            return

        player.queue.clear()
        await player.stop()  # Para a m√∫sica atual
        
        try:
            await player.disconnect(force=True)  # Desconecta do canal de voz
        except Exception as e:
            logger.error(f"Erro ao desconectar player para guild {interaction.guild_id}: {e}")

        # Remove o player da lista do cog
        del self.players[interaction.guild_id]

        await interaction.response.send_message("‚èπÔ∏è Player parado, fila limpa e bot desconectado.")

        if self.now_playing_messages.get(interaction.guild_id):
            try:
                msg_id, channel_id = self.now_playing_messages[interaction.guild_id]
                channel = self.bot.get_channel(channel_id)
                if channel:
                    message = await channel.fetch_message(msg_id)
                    await message.edit(content="Player desconectado. Use `/tocar` para iniciar novamente.", view=None, embed=None)
                del self.now_playing_messages[interaction.guild_id]
            except nextcord.NotFound:
                logger.warning(f"Mensagem 'agora tocando' n√£o encontrada para guild {interaction.guild_id} ao parar.")
            except Exception as e:
                logger.error(f"Erro ao limpar mensagem 'agora tocando' para guild {interaction.guild_id}: {e}")

    @nextcord.slash_command(name="volume", description="Ajusta o volume da m√∫sica (0-100).")
    async def volume(
        self,
        interaction: Interaction,
        nivel: int = SlashOption(
            name="nivel",
            description="N√≠vel de volume (0-100)",
            required=True,
            min_value=0,
            max_value=100
        )
    ):
        """Comando para ajustar o volume da m√∫sica."""
        if not interaction.guild_id or interaction.guild_id not in self.players:
            await interaction.response.send_message("N√£o h√° player de m√∫sica ativo neste servidor.", ephemeral=True)
            return

        player = self.players[interaction.guild_id]
        if not player.connected:
            await interaction.response.send_message("O player de m√∫sica n√£o est√° conectado a um canal de voz.", ephemeral=True)
            return

        await player.set_volume(nivel)
        await interaction.response.send_message(f"üîä Volume ajustado para {nivel}%.")

    @nextcord.slash_command(name="loop", description="Alterna entre modos de loop (desativado, faixa, fila).")
    async def loop(
        self,
        interaction: Interaction,
        modo: str = SlashOption(
            name="modo",
            description="Modo de loop",
            required=True,
            choices={"Desativado": "none", "Faixa Atual": "track", "Fila Inteira": "queue"}
        )
    ):
        """Comando para alternar entre modos de loop."""
        if not interaction.guild_id or interaction.guild_id not in self.players:
            await interaction.response.send_message("N√£o h√° player de m√∫sica ativo neste servidor.", ephemeral=True)
            return

        player = self.players[interaction.guild_id]
        if not player.connected:
            await interaction.response.send_message("O player de m√∫sica n√£o est√° conectado a um canal de voz.", ephemeral=True)
            return

        if modo == "none":
            player.loop = mafic.LoopType.NONE
            await interaction.response.send_message("üîÅ Loop desativado.")
        elif modo == "track":
            player.loop = mafic.LoopType.TRACK
            await interaction.response.send_message("üîÅ Loop da faixa atual ativado.")
        elif modo == "queue":
            player.loop = mafic.LoopType.QUEUE
            await interaction.response.send_message("üîÅ Loop da fila inteira ativado.")

        await self.update_now_playing_message(player)

    @nextcord.slash_command(name="shuffle", description="Embaralha a fila de m√∫sicas.")
    async def shuffle(self, interaction: Interaction):
        """Comando para embaralhar a fila de m√∫sicas."""
        if not interaction.guild_id or interaction.guild_id not in self.players:
            await interaction.response.send_message("N√£o h√° player de m√∫sica ativo neste servidor.", ephemeral=True)
            return

        player = self.players[interaction.guild_id]
        if not player.connected:
            await interaction.response.send_message("O player de m√∫sica n√£o est√° conectado a um canal de voz.", ephemeral=True)
            return

        if not player.queue:
            await interaction.response.send_message("A fila est√° vazia para embaralhar.", ephemeral=True)
            return

        player.queue.shuffle()
        await interaction.response.send_message("üîÄ Fila embaralhada!")
        await self.update_now_playing_message(player)

    # Eventos Mafic
    @commands.Cog.listener()  # Corrigido: usando commands.Cog.listener() em vez de nextcord.Cog.listener()
    async def on_mafic_track_start(self, player: mafic.Player, track: mafic.Track):
        """Evento disparado quando uma faixa come√ßa a tocar."""
        if not player.guild:
            return

        logger.info(f"Faixa iniciada: {track.title} em {player.guild.name} ({player.guild.id})")

        # Cria ou atualiza a mensagem de "agora tocando"
        embed = nextcord.Embed(
            title=f"üé∂ Tocando Agora",
            description=f"**[{track.title}]({track.uri})**",
            color=nextcord.Color.blue()
        )
        embed.add_field(name="Dura√ß√£o", value=self.format_duration(track.length), inline=True)
        embed.add_field(name="Autor", value=track.author, inline=True)
        
        loop_status = "Desativado"
        if player.loop == mafic.LoopType.TRACK: loop_status = "Faixa Atual"
        elif player.loop == mafic.LoopType.QUEUE: loop_status = "Fila Inteira"
        embed.add_field(name="Loop", value=loop_status, inline=True)

        if track.artwork_url:
            embed.set_thumbnail(url=track.artwork_url)
        
        queue_display = []
        if player.queue:
            for i, item in enumerate(player.queue[:5]):  # Mostra as pr√≥ximas 5
                queue_display.append(f"{i+1}. {item.title} ({self.format_duration(item.length)})")
        
        embed.add_field(name=f"Pr√≥ximas na Fila ({len(player.queue)})", value="\n".join(queue_display) if queue_display else "Fila vazia", inline=False)
        
        # Corrigido o problema de aspas na f-string
        embed.set_footer(text=f"Adicionado por: {track.requester.display_name if track.requester else 'Desconhecido'}", 
                         icon_url=track.requester.display_avatar.url if track.requester else self.bot.user.display_avatar.url)

        # Verifica se j√° existe uma mensagem de "agora tocando" para este servidor
        if player.guild.id in self.now_playing_messages:
            try:
                msg_id, channel_id = self.now_playing_messages[player.guild.id]
                channel = self.bot.get_channel(channel_id)
                if channel:
                    try:
                        message = await channel.fetch_message(msg_id)
                        await message.edit(content=None, embed=embed, view=PlayerControls(player, self))
                        return
                    except nextcord.NotFound:
                        # Mensagem n√£o encontrada, vamos criar uma nova
                        pass
                    except Exception as e:
                        logger.error(f"Erro ao editar mensagem 'agora tocando' para guild {player.guild.id}: {e}")
            except Exception as e:
                logger.error(f"Erro ao processar mensagem 'agora tocando' existente para guild {player.guild.id}: {e}")

        # Se chegou aqui, precisamos criar uma nova mensagem
        # Encontra o canal de texto mais adequado para enviar a mensagem
        text_channel = None
        
        # Tenta encontrar o canal onde o comando foi executado
        if track.requester and isinstance(track.requester, nextcord.Member):
            for channel in player.guild.text_channels:
                if channel.permissions_for(player.guild.me).send_messages and channel.permissions_for(track.requester).read_messages:
                    text_channel = channel
                    break
        
        # Se n√£o encontrou, tenta o canal geral ou o primeiro canal dispon√≠vel
        if not text_channel:
            for channel in player.guild.text_channels:
                if channel.permissions_for(player.guild.me).send_messages:
                    if channel.name.lower() in ["geral", "general", "chat", "m√∫sica", "music"]:
                        text_channel = channel
                        break
            
            if not text_channel:
                for channel in player.guild.text_channels:
                    if channel.permissions_for(player.guild.me).send_messages:
                        text_channel = channel
                        break
        
        if text_channel:
            try:
                message = await text_channel.send(embed=embed, view=PlayerControls(player, self))
                self.now_playing_messages[player.guild.id] = (message.id, text_channel.id)
                logger.info(f"Nova mensagem 'agora tocando' criada para guild {player.guild.id} no canal {text_channel.name}")
            except Exception as e:
                logger.error(f"Erro ao criar mensagem 'agora tocando' para guild {player.guild.id}: {e}")

    @commands.Cog.listener()  # Corrigido: usando commands.Cog.listener() em vez de nextcord.Cog.listener()
    async def on_mafic_track_end(self, player: mafic.Player, track: mafic.Track, reason: str):
        """Evento disparado quando uma faixa termina de tocar."""
        logger.info(f"Faixa terminada: {track.title} em {player.guild.name if player.guild else 'Unknown'} ({player.guild.id if player.guild else 'Unknown'}). Raz√£o: {reason}")
        
        # Se a fila estiver vazia e n√£o houver mais nada tocando, podemos limpar a mensagem de "agora tocando"
        if not player.queue and not player.current and player.guild and player.guild.id in self.now_playing_messages:
            try:
                msg_id, channel_id = self.now_playing_messages[player.guild.id]
                channel = self.bot.get_channel(channel_id)
                if channel:
                    message = await channel.fetch_message(msg_id)
                    await message.edit(content="Fila vazia. Use `/tocar` para adicionar mais m√∫sicas!", embed=None, view=None)
            except Exception as e:
                logger.error(f"Erro ao atualizar mensagem 'agora tocando' ap√≥s fim da fila para guild {player.guild.id if player.guild else 'Unknown'}: {e}")

    @commands.Cog.listener()  # Corrigido: usando commands.Cog.listener() em vez de nextcord.Cog.listener()
    async def on_mafic_track_exception(self, player: mafic.Player, track: mafic.Track, exception: Exception):
        """Evento disparado quando ocorre um erro ao tocar uma faixa."""
        logger.error(f"Erro ao tocar faixa: {track.title} em {player.guild.name if player.guild else 'Unknown'} ({player.guild.id if player.guild else 'Unknown'}). Erro: {exception}")
        
        # Tenta notificar no canal onde a mensagem de "agora tocando" est√°
        if player.guild and player.guild.id in self.now_playing_messages:
            try:
                msg_id, channel_id = self.now_playing_messages[player.guild.id]
                channel = self.bot.get_channel(channel_id)
                if channel:
                    await channel.send(f"‚ùå Erro ao tocar **{track.title}**: {exception}")
            except Exception as e:
                logger.error(f"Erro ao enviar notifica√ß√£o de erro para guild {player.guild.id if player.guild else 'Unknown'}: {e}")

    @commands.Cog.listener()  # Corrigido: usando commands.Cog.listener() em vez de nextcord.Cog.listener()
    async def on_mafic_track_stuck(self, player: mafic.Player, track: mafic.Track, threshold_ms: int):
        """Evento disparado quando uma faixa fica presa (n√£o avan√ßa)."""
        logger.warning(f"Faixa presa: {track.title} em {player.guild.name if player.guild else 'Unknown'} ({player.guild.id if player.guild else 'Unknown'}). Threshold: {threshold_ms}ms")
        
        # Tenta pular a faixa presa
        try:
            await player.stop()
            
            # Notifica no canal onde a mensagem de "agora tocando" est√°
            if player.guild and player.guild.id in self.now_playing_messages:
                try:
                    msg_id, channel_id = self.now_playing_messages[player.guild.id]
                    channel = self.bot.get_channel(channel_id)
                    if channel:
                        await channel.send(f"‚ö†Ô∏è A m√∫sica **{track.title}** ficou presa e foi pulada automaticamente.")
                except Exception as e:
                    logger.error(f"Erro ao enviar notifica√ß√£o de faixa presa para guild {player.guild.id if player.guild else 'Unknown'}: {e}")
        except Exception as e:
            logger.error(f"Erro ao tentar pular faixa presa: {e}")

    @commands.Cog.listener()  # Corrigido: usando commands.Cog.listener() em vez de nextcord.Cog.listener()
    async def on_voice_state_update(self, member: nextcord.Member, before: nextcord.VoiceState, after: nextcord.VoiceState):
        """Evento disparado quando o estado de voz de um membro muda."""
        # Ignora se n√£o for o bot
        if member.id != self.bot.user.id:
            return
        
        # Verifica se o bot foi desconectado do canal de voz
        if before.channel and not after.channel:
            # Bot foi desconectado, limpa o player
            if member.guild.id in self.players:
                logger.info(f"Bot desconectado do canal de voz em {member.guild.name} ({member.guild.id}). Limpando player.")
                
                try:
                    # Tenta destruir o player corretamente
                    player = self.players[member.guild.id]
                    player.queue.clear()
                    
                    try:
                        await player.destroy()
                    except Exception as e_destroy:
                        logger.error(f"Erro ao destruir player ap√≥s desconex√£o para guild {member.guild.id}: {e_destroy}")
                    
                    # Remove o player da lista
                    del self.players[member.guild.id]
                    
                    # Atualiza a mensagem de "agora tocando"
                    if member.guild.id in self.now_playing_messages:
                        try:
                            msg_id, channel_id = self.now_playing_messages[member.guild.id]
                            channel = self.bot.get_channel(channel_id)
                            if channel:
                                message = await channel.fetch_message(msg_id)
                                await message.edit(content="Bot desconectado do canal de voz. Use `/tocar` para iniciar novamente.", embed=None, view=None)
                            del self.now_playing_messages[member.guild.id]
                        except Exception as e:
                            logger.error(f"Erro ao atualizar mensagem 'agora tocando' ap√≥s desconex√£o para guild {member.guild.id}: {e}")
                except Exception as e:
                    logger.error(f"Erro ao limpar player ap√≥s desconex√£o para guild {member.guild.id}: {e}")

    # Tratamento de erros para comandos de aplica√ß√£o
    @commands.Cog.listener()  # Corrigido: usando commands.Cog.listener() em vez de nextcord.Cog.listener()
    async def on_application_command_error(self, interaction: Interaction, error):
        # Verifica se o erro √© de um comando desta cog
        if hasattr(interaction, 'application_command'):
            try:
                # Verifica tipos espec√≠ficos de erros
                if isinstance(error, commands.CommandOnCooldown):
                    await interaction.response.send_message(
                        f"‚ö†Ô∏è Este comando est√° em cooldown. Tente novamente em {error.retry_after:.1f} segundos.",
                        ephemeral=True
                    )
                elif isinstance(error, mafic.errors.HTTPNotFound):
                    await interaction.response.send_message(
                        f"‚ö†Ô∏è Erro de conex√£o com o servidor de m√∫sica. Tente novamente mais tarde.",
                        ephemeral=True
                    )
                    logger.error(f"Erro HTTP 404 do Lavalink: {error}")
                elif isinstance(error, nextcord.errors.InteractionResponded):
                    # Intera√ß√£o j√° respondida, apenas loga
                    logger.warning(f"Intera√ß√£o j√° respondida: {error}")
                else:
                    # Erro gen√©rico
                    try:
                        if not interaction.response.is_done():
                            await interaction.response.send_message(
                                f"‚ö†Ô∏è Ocorreu um erro ao executar este comando: {str(error)}",
                                ephemeral=True
                            )
                        else:
                            await interaction.followup.send(
                                f"‚ö†Ô∏è Ocorreu um erro ao executar este comando: {str(error)}",
                                ephemeral=True
                            )
                    except Exception as e:
                        logger.error(f"Erro ao enviar mensagem de erro: {e}")
                
                # Loga o erro para debug
                logger.error(f"Erro em comando de m√∫sica: {error}", exc_info=True)
            except Exception as e:
                logger.error(f"Erro ao tratar erro de comando: {e}", exc_info=True)

# Fun√ß√£o setup para carregar a cog
def setup(bot):
    bot.add_cog(Musica(bot))
