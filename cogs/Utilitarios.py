# COG Utilit√°rios com 12 comandos √∫teis

import nextcord
from nextcord.ext import commands
from nextcord import Interaction, SlashOption, Embed, ui
import random
import secrets
import math
import aiohttp

class SugestaoModal(ui.Modal):
    def __init__(self):
        super().__init__("Sugest√£o para o bot")
        self.titulo = ui.TextInput(label="T√≠tulo da sugest√£o", placeholder="Digite aqui...", required=True, max_length=100)
        self.descricao = ui.TextInput(label="Descri√ß√£o", style=nextcord.TextInputStyle.paragraph, placeholder="Explique sua sugest√£o", required=True, max_length=300)
        self.add_item(self.titulo)
        self.add_item(self.descricao)

    async def callback(self, interaction: Interaction):
        embed = Embed(title="üì© Nova Sugest√£o Recebida", color=0x2ecc71)
        embed.add_field(name="T√≠tulo", value=self.titulo.value, inline=False)
        embed.add_field(name="Descri√ß√£o", value=self.descricao.value, inline=False)
        embed.set_footer(text=f"Enviado por {interaction.user}")
        await interaction.response.send_message("Sugest√£o enviada com sucesso!", ephemeral=True)
        canal_logs = nextcord.utils.get(interaction.guild.text_channels, name="sugestoes")
        if canal_logs:
            await canal_logs.send(embed=embed)

class Utilitarios(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.quotes = [
            "A persist√™ncia realiza o imposs√≠vel.",
            "O sucesso √© a soma de pequenos esfor√ßos repetidos todos os dias.",
            "N√£o sabendo que era imposs√≠vel, foi l√° e fez.",
            "Coragem √© resist√™ncia ao medo, dom√≠nio do medo, e n√£o aus√™ncia do medo.",
            "Grandes mentes discutem ideias; mentes medianas discutem eventos; mentes pequenas discutem pessoas.",
            "Seja a mudan√ßa que voc√™ quer ver no mundo.",
            "A vida √© 10% o que acontece com voc√™ e 90% como voc√™ reage.",
            "A melhor maneira de prever o futuro √© cri√°-lo.",
            "Voc√™ nunca ser√° velho demais para definir outro objetivo ou sonhar um novo sonho.",
            "A mente que se abre a uma nova ideia jamais voltar√° ao seu tamanho original.",
            "Tudo o que um sonho precisa para ser realizado √© algu√©m que acredite que ele possa ser realizado.",
            "S√≥ se pode alcan√ßar um grande √™xito quando nos mantemos fi√©is a n√≥s mesmos.",
            "O sucesso nasce do querer, da determina√ß√£o e persist√™ncia em se chegar a um objetivo.",
            "A √∫nica maneira de fazer um excelente trabalho √© amar o que voc√™ faz.",
            "Voc√™ √© mais forte do que pensa.",
            "Acredite no seu potencial.",
            "A sua √∫nica limita√ß√£o √© aquela que voc√™ aceita.",
            "Transforme seus obst√°culos em aprendizado.",
            "N√£o pare at√© se orgulhar.",
            "Desistir n√£o √© uma op√ß√£o.",
            "O melhor ainda est√° por vir.",
            "Voc√™ est√° exatamente onde precisa estar.",
            "Pequenos passos tamb√©m te levam ao destino.",
            "A a√ß√£o √© o ant√≠doto do medo.",
            "Voc√™ n√£o precisa ser perfeito, s√≥ persistente."
        ]

        self.curiosidades = [
            "Polvos t√™m tr√™s cora√ß√µes e sangue azul.",
            "O corpo humano brilha no escuro (mas nossos olhos n√£o percebem).",
            "O mel nunca estraga.",
            "Bananas s√£o tecnicamente frutas vermelhas.",
            "Existem mais estrelas no universo do que gr√£os de areia na Terra.",
            "Os cavalos-marinhos s√£o os √∫nicos animais onde os machos engravidam.",
            "A Terra n√£o √© perfeitamente redonda.",
            "Formigas n√£o dormem.",
            "O c√©rebro humano √© mais ativo √† noite do que durante o dia.",
            "O DNA humano e o da banana s√£o 60% parecidos.",
            "Os flamingos nascem cinzas.",
            "O tubar√£o √© mais velho que as √°rvores.",
            "Existe um tipo de √°gua viva imortal.",
            "O corpo humano tem ouro (em pequenas quantidades).",
            "O nariz humano pode detectar mais de 1 trilh√£o de odores.",
            "As abelhas podem reconhecer rostos humanos.",
            "Cada pessoa tem uma impress√£o de l√≠ngua √∫nica.",
            "A Lua j√° teve atmosfera.",
            "O sol representa 99,86% da massa do sistema solar.",
            "O kiwi √© uma ave, n√£o s√≥ uma fruta.",
            "O dia em V√™nus √© mais longo que o ano.",
            "Os olhos da lula gigante s√£o do tamanho de bolas de basquete.",
            "Existe uma ilha dentro de um lago dentro de uma ilha dentro de um lago dentro de uma ilha.",
            "Os drag√µes-de-komodo podem se reproduzir sem acasalamento.",
            "O calor do n√∫cleo da Terra √© t√£o intenso quanto a superf√≠cie do Sol."
        ]

    @commands.slash_command(name="calculadora", description="Resolve uma express√£o matem√°tica b√°sica.")
    async def calculadora(self, interaction: Interaction, expressao: str):
        try:
            resultado = eval(expressao, {"__builtins__": None, "math": math}, {})
            await interaction.response.send_message(f"üßÆ Resultado: `{resultado}`")
        except Exception:
            await interaction.response.send_message("‚ùå Express√£o inv√°lida.")

    @commands.slash_command(name="clima", description="Mostra o clima atual de uma cidade.")
    async def clima(self, interaction: Interaction, cidade: str):
        api_key = os.getenv("OPENWEATHER_API")
        url = f"https://api.openweathermap.org/data/2.5/weather?q={cidade}&appid={api_key}&units=metric&lang=pt_br"
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as r:
                data = await r.json()
                if data.get("cod") != 200:
                    await interaction.response.send_message("Cidade n√£o encontrada.")
                    return
                embed = Embed(title=f"üå§Ô∏è Clima em {cidade.title()}", color=0x3498db)
                embed.add_field(name="Temperatura", value=f"{data['main']['temp']}¬∞C")
                embed.add_field(name="Descri√ß√£o", value=data['weather'][0]['description'].capitalize())
                embed.add_field(name="Umidade", value=f"{data['main']['humidity']}%")
                await interaction.response.send_message(embed=embed)

    @commands.slash_command(name="dado", description="Rola um dado com X lados")
    async def dado(self, interaction: Interaction, lados: int = 6):
        if lados <= 1:
            await interaction.response.send_message("N√∫mero de lados inv√°lido.")
        else:
            numero = random.randint(1, lados)
            await interaction.response.send_message(f"üé≤ Voc√™ rolou: **{numero}**")

    @commands.slash_command(name="cronometro", description="Inicia um cron√¥metro temporizado")
    async def cronometro(self, interaction: Interaction, segundos: int):
        await interaction.response.send_message(f"‚è±Ô∏è Cron√¥metro iniciado por {segundos}s...")
        await asyncio.sleep(segundos)
        await interaction.followup.send("‚è∞ Tempo encerrado!")

    @commands.slash_command(name="enquete", description="Cria uma enquete com at√© 5 op√ß√µes")
    async def enquete(self, interaction: Interaction, pergunta: str, opcoes: str):
        opcoes_lista = [x.strip() for x in opcoes.split(",")][:5]
        if len(opcoes_lista) < 2:
            await interaction.response.send_message("Voc√™ precisa de pelo menos duas op√ß√µes.")
            return
        embed = Embed(title="üìä Enquete", description=pergunta, color=0xf1c40f)
        botoes = ui.View()
        for i, opcao in enumerate(opcoes_lista):
            btn = ui.Button(label=opcao, custom_id=f"vote_{i}")
            async def votar_callback(inter, index=i):
                await inter.response.send_message(f"‚úÖ Voto computado para: **{opcoes_lista[index]}**", ephemeral=True)
            btn.callback = votar_callback
            botoes.add_item(btn)
        await interaction.response.send_message(embed=embed, view=botoes)

    @commands.slash_command(name="github", description="Mostra info de um reposit√≥rio do GitHub")
    async def github(self, interaction: Interaction, repositorio: str):
        async with aiohttp.ClientSession() as session:
            async with session.get(f"https://api.github.com/repos/{repositorio}") as r:
                if r.status != 200:
                    await interaction.response.send_message("‚ùå Reposit√≥rio n√£o encontrado.")
                    return
                data = await r.json()
                embed = Embed(title=data['full_name'], description=data['description'], url=data['html_url'], color=0x3333ff)
                embed.add_field(name="‚≠ê Stars", value=data['stargazers_count'])
                embed.add_field(name="üîÄ Forks", value=data['forks_count'])
                embed.set_footer(text="GitHub")
                await interaction.response.send_message(embed=embed)

    @commands.slash_command(name="contagem", description="Faz uma contagem regressiva")
    async def contagem(self, interaction: Interaction, segundos: int):
        if segundos > 15:
            await interaction.response.send_message("‚ö†Ô∏è Limite de 15 segundos.")
            return
        msg = await interaction.response.send_message(f"Contagem iniciada: {segundos}s")
        for i in range(segundos - 1, 0, -1):
            await asyncio.sleep(1)
            await msg.edit(content=f"{i}s...")
        await asyncio.sleep(1)
        await msg.edit(content="üéâ Tempo encerrado!")

    @commands.slash_command(name="quote", description="Receba uma cita√ß√£o aleat√≥ria")
    async def quote(self, interaction: Interaction):
        await interaction.response.send_message(f"üìú *{random.choice(self.quotes)}*")

    @commands.slash_command(name="numero_aleatorio", description="Gera um n√∫mero entre dois valores")
    async def numero_aleatorio(self, interaction: Interaction, minimo: int, maximo: int):
        if minimo >= maximo:
            await interaction.response.send_message("‚ö†Ô∏è O m√≠nimo deve ser menor que o m√°ximo.")
        else:
            await interaction.response.send_message(f"üé≤ N√∫mero gerado: {random.randint(minimo, maximo)}")

    @commands.slash_command(name="sugestao", description="Envie uma sugest√£o para o bot")
    async def sugestao(self, interaction: Interaction):
        await interaction.response.send_modal(SugestaoModal())

    @commands.slash_command(name="senha", description="Gera uma senha aleat√≥ria segura")
    async def senha(self, interaction: Interaction, tamanho: int = 12):
        if tamanho < 4 or tamanho > 32:
            await interaction.response.send_message("Escolha um tamanho entre 4 e 32 caracteres.")
            return
        caracteres = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()"
        senha = ''.join(secrets.choice(caracteres) for _ in range(tamanho))
        await interaction.response.send_message(f"üîê Sua senha gerada: `{senha}`")

    @commands.slash_command(name="curiosidade", description="Veja uma curiosidade aleat√≥ria")
    async def curiosidade(self, interaction: Interaction):
        await interaction.response.send_message(f"üß† {random.choice(self.curiosidades)}")

def setup(bot):
    bot.add_cog(Utilitarios(bot))
