# /home/ubuntu/ShirayukiBot/cogs/Utilitarios.py
# Cog para comandos utilit√°rios diversos.

import os
import random
import secrets
import math
import asyncio
import aiohttp
import nextcord
from nextcord import Interaction, Embed, SlashOption, Color, File
from nextcord.ext import commands, tasks
from nextcord import ui
import datetime
import pytz # Para fusos hor√°rios
import qrcode # Para gerar QR codes
from io import BytesIO
# from googletrans import Translator # Considerar alternativa ou API paga

# --- Emojis Customizados ---
EMOJI_SUCCESS = "<:8_:1366997164521164830>" # Emoji de sucesso
EMOJI_FAILURE = "<:1_:1366996823654535208>" # Emoji de falha/triste
EMOJI_INFO = "<:7_:1366997117410873404>"    # Emoji de informa√ß√£o/neutro
EMOJI_WAIT = "<:2_:1366996885398749254>"     # Emoji de espera
EMOJI_QUESTION = "<:6_:1366997079347429427>" # Emoji de d√∫vida/ajuda
EMOJI_WARN = "<:4_:1366996921297801216>"     # Emoji de aviso
EMOJI_CELEBRATE = "<:5_:1366997045445132360>" # Emoji de celebra√ß√£o
EMOJI_HAPPY = "<:3_:1366996904663322654>"     # Emoji feliz gen√©rico

# --- Configura√ß√µes ---
SERVER_ID = 1367345048458498219 # Para registro r√°pido de comandos
REMINDERS_FILE = "/home/ubuntu/ShirayukiBot/data/reminders.json"
SUGGESTIONS_CHANNEL_NAME = "sugestoes" # Nome do canal para enviar sugest√µes
DEFAULT_TIMEZONE = "America/Sao_Paulo"

# --- Fun√ß√µes Auxiliares --- 
def ensure_dir_exists(file_path):
    """Garante que o diret√≥rio de um arquivo exista."""
    directory = os.path.dirname(file_path)
    if not os.path.exists(directory):
        os.makedirs(directory)
        print(f"[INFO] Diret√≥rio criado: {directory}")

def load_json_data(file_path, default_data):
    """Carrega dados de um arquivo JSON, criando-o com dados padr√£o se n√£o existir."""
    ensure_dir_exists(file_path)
    if not os.path.exists(file_path):
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(default_data, f, indent=4, ensure_ascii=False)
        return default_data
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (json.JSONDecodeError, FileNotFoundError):
        print(f"[ERRO] Falha ao carregar {file_path}, usando dados padr√£o.")
        return default_data

def save_json_data(file_path, data):
    """Salva dados em um arquivo JSON."""
    ensure_dir_exists(file_path)
    try:
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=4, ensure_ascii=False)
    except IOError as e:
        print(f"[ERRO] Falha ao salvar {file_path}: {e}")

# --- Views e Modals --- 

class SugestaoModal(ui.Modal):
    def __init__(self, suggestions_channel_name: str):
        super().__init__("Sugest√£o para o Bot")
        self.suggestions_channel_name = suggestions_channel_name
        self.titulo = ui.TextInput(label="T√≠tulo da sugest√£o", placeholder="Ex: Novo comando de m√∫sica", required=True, max_length=100)
        self.descricao = ui.TextInput(label="Descri√ß√£o detalhada", style=nextcord.TextInputStyle.paragraph, placeholder="Explique sua ideia, como funcionaria, etc.", required=True, max_length=1000)
        self.add_item(self.titulo)
        self.add_item(self.descricao)

    async def callback(self, interaction: Interaction):
        embed = Embed(title=f"{EMOJI_INFO} Nova Sugest√£o Recebida", color=Color.green())
        embed.add_field(name="T√≠tulo", value=self.titulo.value, inline=False)
        embed.add_field(name="Descri√ß√£o", value=self.descricao.value, inline=False)
        embed.set_footer(text=f"Enviado por {interaction.user.display_name} ({interaction.user.id})")
        embed.timestamp = datetime.datetime.utcnow()

        await interaction.response.send_message(f"{EMOJI_SUCCESS} Sugest√£o enviada com sucesso! Obrigado pela sua contribui√ß√£o.", ephemeral=True)
        
        # Tenta encontrar o canal de sugest√µes
        canal_logs = nextcord.utils.get(interaction.guild.text_channels, name=self.suggestions_channel_name)
        if canal_logs:
            try:
                await canal_logs.send(embed=embed)
            except nextcord.Forbidden:
                 await interaction.followup.send(f"{EMOJI_FAILURE} N√£o tenho permiss√£o para enviar a sugest√£o no canal #{self.suggestions_channel_name}.", ephemeral=True)
            except Exception as e:
                 await interaction.followup.send(f"{EMOJI_FAILURE} Erro ao enviar sugest√£o para #{self.suggestions_channel_name}: {e}", ephemeral=True)
        else:
            # Se n√£o encontrar, avisa o usu√°rio (n√£o envia no canal atual para evitar spam)
            await interaction.followup.send(f"{EMOJI_WARN} Canal #{self.suggestions_channel_name} n√£o encontrado neste servidor. A sugest√£o foi registrada, mas n√£o pude envi√°-la para o canal espec√≠fico.", ephemeral=True)
            # Opcional: Logar a sugest√£o em outro lugar ou para o dono do bot via DM
            print(f"[Sugest√£o] {interaction.user}: {self.titulo.value} - {self.descricao.value}")

class EnqueteView(ui.View):
    def __init__(self, pergunta: str, opcoes_lista: list):
        super().__init__(timeout=None) # Enquetes n√£o expiram por padr√£o
        self.pergunta = pergunta
        self.opcoes = opcoes_lista
        self.votos = {i: 0 for i in range(len(opcoes_lista))}
        self.votantes = set() # Guarda IDs de quem j√° votou
        self.message = None # Refer√™ncia √† mensagem da enquete
        self.update_buttons()

    def update_buttons(self):
        """Atualiza os bot√µes com a contagem de votos."""
        self.clear_items()
        total_votos = sum(self.votos.values())
        for i, opcao in enumerate(self.opcoes):
            label = f"{opcao} ({self.votos[i]})"
            button = ui.Button(label=label, custom_id=f"vote_{i}", style=ButtonStyle.primary)
            button.callback = self.create_callback(i)
            self.add_item(button)
        # Adiciona bot√£o para finalizar (opcional, talvez s√≥ para o criador?)
        # finish_button = ui.Button(label="Finalizar Enquete", custom_id="finish_poll", style=ButtonStyle.danger)
        # finish_button.callback = self.finish_poll_callback
        # self.add_item(finish_button)

    def create_callback(self, index: int):
        """Cria a fun√ß√£o de callback para um bot√£o de voto espec√≠fico."""
        async def callback(interaction: Interaction):
            user_id = interaction.user.id
            if user_id in self.votantes:
                await interaction.response.send_message(f"{EMOJI_WARN} Voc√™ j√° votou nesta enquete!", ephemeral=True)
                return

            self.votos[index] += 1
            self.votantes.add(user_id)
            self.update_buttons() # Atualiza contagem nos bot√µes
            
            # Atualiza o embed com os resultados
            embed = self.create_poll_embed()
            await interaction.response.edit_message(embed=embed, view=self)
            # Confirma√ß√£o ef√™mera para o votante
            await interaction.followup.send(f"{EMOJI_SUCCESS} Seu voto para **{self.opcoes[index]}** foi registrado!", ephemeral=True)
            
        return callback

    # async def finish_poll_callback(self, interaction: Interaction):
    #     # TODO: Adicionar verifica√ß√£o se o usu√°rio √© o criador da enquete
    #     embed = self.create_poll_embed(final=True)
    #     await interaction.response.edit_message(embed=embed, view=None)
    #     self.stop()

    def create_poll_embed(self, final: bool = False) -> Embed:
        """Cria o embed da enquete com os resultados atuais."""
        title = f"üìä Enquete{' Finalizada' if final else ''}"
        embed = Embed(title=title, description=self.pergunta, color=Color.blue())
        total_votos = sum(self.votos.values())
        
        resultados = []
        for i, opcao in enumerate(self.opcoes):
            votos_opcao = self.votos[i]
            percentual = (votos_opcao / total_votos * 100) if total_votos > 0 else 0
            resultados.append(f"**{opcao}**: {votos_opcao} voto{'s' if votos_opcao != 1 else ''} ({percentual:.1f}%)")
            
        embed.add_field(name="Resultados", value="\n".join(resultados) if resultados else "Nenhum voto ainda.", inline=False)
        embed.set_footer(text=f"Total de votos: {total_votos}")
        return embed

# --- Cog Utilitarios --- 
class Utilitarios(commands.Cog):
    """Comandos utilit√°rios diversos para o dia a dia."""
    def __init__(self, bot):
        self.bot = bot
        self.reminders = load_json_data(REMINDERS_FILE, [])
        self.quotes = self.load_default_quotes()
        self.curiosidades = self.load_default_curiosidades()
        self.check_reminders.start() # Inicia a task de verifica√ß√£o de lembretes
        print(f"[DIAGN√ìSTICO] Cog Utilitarios carregada.")
        print(f"[Utilitarios] {len(self.reminders)} lembretes carregados.")

    def cog_unload(self):
        """Para a task quando o cog √© descarregado."""
        self.check_reminders.cancel()

    def load_default_quotes(self):
        # Retorna lista de cita√ß√µes padr√£o
        return [
            "A persist√™ncia realiza o imposs√≠vel.", "O sucesso √© a soma de pequenos esfor√ßos repetidos todos os dias.",
            "N√£o sabendo que era imposs√≠vel, foi l√° e fez.", "Coragem √© resist√™ncia ao medo, dom√≠nio do medo, e n√£o aus√™ncia do medo.",
            "Grandes mentes discutem ideias; mentes medianas discutem eventos; mentes pequenas discutem pessoas.",
            "Seja a mudan√ßa que voc√™ quer ver no mundo.", "A vida √© 10% o que acontece com voc√™ e 90% como voc√™ reage.",
            "A melhor maneira de prever o futuro √© cri√°-lo.", "Voc√™ nunca ser√° velho demais para definir outro objetivo ou sonhar um novo sonho.",
            "A mente que se abre a uma nova ideia jamais voltar√° ao seu tamanho original.", "Tudo o que um sonho precisa para ser realizado √© algu√©m que acredite que ele possa ser realizado.",
            "S√≥ se pode alcan√ßar um grande √™xito quando nos mantemos fi√©is a n√≥s mesmos.", "O sucesso nasce do querer, da determina√ß√£o e persist√™ncia em se chegar a um objetivo.",
            "A √∫nica maneira de fazer um excelente trabalho √© amar o que voc√™ faz.", "Voc√™ √© mais forte do que pensa.",
            "Acredite no seu potencial.", "A sua √∫nica limita√ß√£o √© aquela que voc√™ aceita.",
            "Transforme seus obst√°culos em aprendizado.", "N√£o pare at√© se orgulhar.", "Desistir n√£o √© uma op√ß√£o.",
            "O melhor ainda est√° por vir.", "Voc√™ est√° exatamente onde precisa estar.",
            "Pequenos passos tamb√©m te levam ao destino.", "A a√ß√£o √© o ant√≠doto do medo.", "Voc√™ n√£o precisa ser perfeito, s√≥ persistente."
        ]

    def load_default_curiosidades(self):
        # Retorna lista de curiosidades padr√£o
        return [
            "Polvos t√™m tr√™s cora√ß√µes e sangue azul.", "O corpo humano brilha no escuro (mas nossos olhos n√£o percebem).",
            "O mel nunca estraga.", "Bananas s√£o tecnicamente frutas vermelhas.", "Existem mais estrelas no universo do que gr√£os de areia na Terra.",
            "Os cavalos-marinhos s√£o os √∫nicos animais onde os machos engravidam.", "A Terra n√£o √© perfeitamente redonda.",
            "Formigas n√£o dormem.", "O c√©rebro humano √© mais ativo √† noite do que durante o dia.", "O DNA humano e o da banana s√£o 60% parecidos.",
            "Os flamingos nascem cinzas.", "O tubar√£o √© mais velho que as √°rvores.", "Existe um tipo de √°gua viva imortal.",
            "O corpo humano tem ouro (em pequenas quantidades).", "O nariz humano pode detectar mais de 1 trilh√£o de odores.",
            "As abelhas podem reconhecer rostos humanos.", "Cada pessoa tem uma impress√£o de l√≠ngua √∫nica.", "A Lua j√° teve atmosfera.",
            "O sol representa 99,86% da massa do sistema solar.", "O kiwi √© uma ave, n√£o s√≥ uma fruta.",
            "O dia em V√™nus √© mais longo que o ano.", "Os olhos da lula gigante s√£o do tamanho de bolas de basquete.",
            "Existe uma ilha dentro de um lago dentro de uma ilha dentro de um lago dentro de uma ilha.",
            "Os drag√µes-de-komodo podem se reproduzir sem acasalamento.", "O calor do n√∫cleo da Terra √© t√£o intenso quanto a superf√≠cie do Sol."
        ]

    # --- Task de Lembretes --- 
    @tasks.loop(seconds=30) # Verifica a cada 30 segundos
    async def check_reminders(self):
        now = datetime.datetime.utcnow().timestamp()
        reminders_to_remove = []
        reminders_updated = False

        for i, reminder in enumerate(self.reminders):
            if reminder["timestamp"] <= now:
                try:
                    user = await self.bot.fetch_user(reminder["user_id"])
                    channel = await self.bot.fetch_channel(reminder["channel_id"])
                    
                    embed = Embed(title=f"{EMOJI_INFO} Lembrete!", description=reminder["message"], color=Color.orange())
                    embed.set_footer(text=f"Lembrete criado em: {datetime.datetime.fromtimestamp(reminder['created_at'], tz=pytz.utc).strftime('%d/%m/%Y %H:%M:%S UTC')}")
                    
                    # Tenta enviar no canal original, se falhar, tenta DM
                    try:
                        await channel.send(content=user.mention, embed=embed)
                    except (nextcord.Forbidden, nextcord.NotFound):
                        try:
                            await user.send(content=f"Lembrete do servidor/canal `{reminder['guild_id'] or 'DM'}/{reminder['channel_id']}`:", embed=embed)
                        except (nextcord.Forbidden, nextcord.HTTPException):
                            print(f"[ERRO Lembrete] Falha ao enviar lembrete para {user.id} (canal {reminder['channel_id']} e DM)")
                            
                    reminders_to_remove.append(i)
                    reminders_updated = True
                except Exception as e:
                    print(f"[ERRO Lembrete] Erro ao processar lembrete {i}: {e}")
                    # Considerar remover lembretes com erro persistente?
                    # reminders_to_remove.append(i)
                    # reminders_updated = True

        # Remove lembretes conclu√≠dos (iterando de tr√°s para frente para evitar problemas de √≠ndice)
        if reminders_updated:
            for index in sorted(reminders_to_remove, reverse=True):
                del self.reminders[index]
            save_json_data(REMINDERS_FILE, self.reminders)

    @check_reminders.before_loop
    async def before_check_reminders(self):
        await self.bot.wait_until_ready() # Espera o bot estar pronto

    # --- Comandos Slash --- 

    @nextcord.slash_command(guild_ids=[SERVER_ID], name="lembrete", description="Define um lembrete para voc√™.")
    async def lembrete(self, interaction: Interaction, 
                       tempo: str = SlashOption(description="Tempo at√© o lembrete (ex: 10s, 5m, 2h, 1d)"), 
                       mensagem: str = SlashOption(description="A mensagem do lembrete")):
        """Agenda uma mensagem para ser enviada ap√≥s um tempo especificado."""
        try:
            seconds = 0
            num = int(tempo[:-1])
            unit = tempo[-1].lower()
            if unit == 's': seconds = num
            elif unit == 'm': seconds = num * 60
            elif unit == 'h': seconds = num * 3600
            elif unit == 'd': seconds = num * 86400
            else: raise ValueError("Unidade de tempo inv√°lida (use s, m, h, d)")

            if seconds <= 0:
                 raise ValueError("O tempo deve ser positivo.")
            if seconds > 30 * 86400: # Limite de 30 dias
                 raise ValueError("O tempo m√°ximo para lembretes √© de 30 dias.")

            future_timestamp = datetime.datetime.utcnow().timestamp() + seconds
            created_at = datetime.datetime.utcnow().timestamp()
            
            reminder_data = {
                "user_id": interaction.user.id,
                "channel_id": interaction.channel.id,
                "guild_id": interaction.guild.id if interaction.guild else None,
                "timestamp": future_timestamp,
                "message": mensagem,
                "created_at": created_at
            }
            self.reminders.append(reminder_data)
            save_json_data(REMINDERS_FILE, self.reminders)

            future_dt = datetime.datetime.fromtimestamp(future_timestamp, tz=pytz.utc)
            await interaction.response.send_message(f"{EMOJI_SUCCESS} Lembrete definido! Voc√™ ser√° lembrado sobre "{mensagem}" em <t:{int(future_timestamp)}:R> (<t:{int(future_timestamp)}:f>).", ephemeral=True)

        except ValueError as e:
            await interaction.response.send_message(f"{EMOJI_FAILURE} Formato de tempo inv√°lido: {e}. Use n√∫meros seguidos de s, m, h ou d (ex: 10m, 2h).", ephemeral=True)
        except Exception as e:
            await interaction.response.send_message(f"{EMOJI_FAILURE} Erro ao definir lembrete: {e}", ephemeral=True)

    @nextcord.slash_command(guild_ids=[SERVER_ID], name="calculadora", description="Resolve uma express√£o matem√°tica b√°sica.")
    async def calculadora(self, interaction: Interaction, expressao: str = SlashOption(description="A express√£o a ser calculada")):
        """Calcula o resultado de uma express√£o matem√°tica simples."""
        try:
            allowed_chars = "0123456789+-*/(). "
            if not all(c in allowed_chars for c in expressao):
                raise ValueError("Express√£o cont√©m caracteres n√£o permitidos.")
            
            # Avalia√ß√£o segura (alternativa ao eval complexo)
            # Nota: Isso √© muito limitado. Para algo mais robusto, uma biblioteca de parsing √© necess√°ria.
            # Considerar usar numexpr ou similar se precisar de mais fun√ß√µes.
            resultado = eval(expressao, {'__builtins__': {}}, {}) # Eval muito restrito
            
            await interaction.response.send_message(f"{EMOJI_SUCCESS} Resultado: `{expressao} = {resultado}`")
        except Exception as e:
            await interaction.response.send_message(f"{EMOJI_FAILURE} N√£o foi poss√≠vel calcular a express√£o: `{e}`. Use apenas n√∫meros e operadores b√°sicos (+, -, *, /).", ephemeral=True)

    @nextcord.slash_command(guild_ids=[SERVER_ID], name="clima", description="Mostra o clima atual de uma cidade.")
    async def clima(self, interaction: Interaction, cidade: str = SlashOption(description="Nome da cidade")):
        """Busca e exibe informa√ß√µes meteorol√≥gicas de uma cidade usando OpenWeatherMap."""
        api_key = os.getenv("OPENWEATHER_API") # Certifique-se de definir esta vari√°vel de ambiente!
        if not api_key:
            await interaction.response.send_message(f"{EMOJI_FAILURE} A funcionalidade de clima n√£o est√° configurada no momento (API Key ausente).", ephemeral=True)
            return
            
        await interaction.response.defer()
        url = f"https://api.openweathermap.org/data/2.5/weather?q={cidade}&appid={api_key}&units=metric&lang=pt_br"
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as r:
                    data = await r.json()
                    if r.status != 200:
                        error_message = data.get("message", "Erro desconhecido")
                        await interaction.followup.send(f"{EMOJI_FAILURE} N√£o foi poss√≠vel encontrar a cidade "{cidade}". ({error_message.capitalize()})", ephemeral=True)
                        return
                        
                    embed = Embed(title=f"üå§Ô∏è Clima em {data['name']}, {data['sys']['country']}", color=Color.blue())
                    temp = data['main']['temp']
                    feels_like = data['main']['feels_like']
                    description = data['weather'][0]['description'].capitalize()
                    humidity = data['main']['humidity']
                    wind_speed = data['wind']['speed']
                    icon_code = data['weather'][0]['icon']
                    
                    embed.set_thumbnail(url=f"http://openweathermap.org/img/wn/{icon_code}@2x.png")
                    embed.add_field(name="Condi√ß√£o", value=description, inline=True)
                    embed.add_field(name="üå°Ô∏è Temperatura", value=f"{temp}¬∞C", inline=True)
                    embed.add_field(name="ü§î Sensa√ß√£o T√©rmica", value=f"{feels_like}¬∞C", inline=True)
                    embed.add_field(name="üíß Umidade", value=f"{humidity}%", inline=True)
                    embed.add_field(name="üí® Vento", value=f"{wind_speed} m/s", inline=True)
                    # Adicionar mais dados se desejar (press√£o, visibilidade, nascer/p√¥r do sol)
                    sunrise_ts = data['sys']['sunrise']
                    sunset_ts = data['sys']['sunset']
                    embed.add_field(name="‚òÄÔ∏è Nascer do Sol", value=f"<t:{sunrise_ts}:t>", inline=True)
                    embed.add_field(name="üåô P√¥r do Sol", value=f"<t:{sunset_ts}:t>", inline=True)
                    
                    embed.set_footer(text="Dados fornecidos por OpenWeatherMap")
                    embed.timestamp = datetime.datetime.fromtimestamp(data['dt'], tz=pytz.utc)
                    
                    await interaction.followup.send(embed=embed)
        except aiohttp.ClientError as e:
             await interaction.followup.send(f"{EMOJI_FAILURE} Erro de conex√£o ao buscar dados do clima: {e}", ephemeral=True)
        except Exception as e:
            print(f"[ERRO Clima] {e}")
            await interaction.followup.send(f"{EMOJI_FAILURE} Ocorreu um erro inesperado ao buscar o clima.", ephemeral=True)

    @nextcord.slash_command(guild_ids=[SERVER_ID], name="dado", description="Rola um ou mais dados com X lados.")
    async def dado(self, interaction: Interaction, 
                   quantidade: int = SlashOption(description="N√∫mero de dados", default=1, min_value=1, max_value=25),
                   lados: int = SlashOption(description="N√∫mero de lados do dado", default=6, min_value=2, max_value=1000)):
        """Rola um ou mais dados e mostra os resultados individuais e a soma."""
        if quantidade == 1:
            resultado = random.randint(1, lados)
            await interaction.response.send_message(f"üé≤ Voc√™ rolou um d{lados}: **{resultado}**")
        else:
            rolagens = [random.randint(1, lados) for _ in range(quantidade)]
            soma = sum(rolagens)
            rolagens_str = ", ".join(map(str, rolagens))
            if len(rolagens_str) > 1000:
                rolagens_str = rolagens_str[:997] + "..."
            embed = Embed(title=f"üé≤ Rolagem de {quantidade}d{lados}", color=Color.random())
            embed.add_field(name="Resultados Individuais", value=f"`{rolagens_str}`", inline=False)
            embed.add_field(name="Soma Total", value=f"**{soma}**", inline=False)
            await interaction.response.send_message(embed=embed)

    @nextcord.slash_command(guild_ids=[SERVER_ID], name="cronometro", description="Inicia um cron√¥metro regressivo.")
    async def cronometro(self, interaction: Interaction, segundos: int = SlashOption(description="Dura√ß√£o em segundos", min_value=1, max_value=600)):
        """Inicia uma contagem regressiva e notifica o usu√°rio ao final."""
        end_time = datetime.datetime.utcnow() + datetime.timedelta(seconds=segundos)
        await interaction.response.send_message(f"‚è±Ô∏è Cron√¥metro iniciado! Termina em <t:{int(end_time.timestamp())}:R>.", ephemeral=(segundos > 60))
        
        await asyncio.sleep(segundos)
        
        try:
            # Tenta responder √† intera√ß√£o original se ainda for v√°lida, sen√£o envia mensagem normal
            await interaction.followup.send(f"‚è∞ {interaction.user.mention}, seu cron√¥metro de {segundos}s terminou!", allowed_mentions=nextcord.AllowedMentions(users=True))
        except nextcord.NotFound:
             # Se a intera√ß√£o expirou, tenta enviar no canal
             try:
                 await interaction.channel.send(f"‚è∞ {interaction.user.mention}, seu cron√¥metro de {segundos}s terminou!", allowed_mentions=nextcord.AllowedMentions(users=True))
             except Exception as e:
                 print(f"[ERRO Cronometro] Falha ao notificar {interaction.user.id} no canal {interaction.channel.id}: {e}")
        except Exception as e:
            print(f"[ERRO Cronometro] Falha ao notificar {interaction.user.id}: {e}")

    @nextcord.slash_command(guild_ids=[SERVER_ID], name="enquete", description="Cria uma enquete interativa com bot√µes.")
    async def enquete(self, interaction: Interaction, 
                      pergunta: str = SlashOption(description="A pergunta da enquete"), 
                      opcoes: str = SlashOption(description="As op√ß√µes separadas por v√≠rgula (m√°x 10)")):
        """Cria uma enquete onde usu√°rios podem votar clicando em bot√µes."""
        opcoes_lista = [op.strip() for op in opcoes.split(',') if op.strip()][:10] # Limita a 10 op√ß√µes
        if len(opcoes_lista) < 2:
            await interaction.response.send_message(f"{EMOJI_FAILURE} Voc√™ precisa fornecer pelo menos duas op√ß√µes v√°lidas separadas por v√≠rgula.", ephemeral=True)
            return
            
        view = EnqueteView(pergunta, opcoes_lista)
        initial_embed = view.create_poll_embed()
        await interaction.response.send_message(embed=initial_embed, view=view)
        view.message = await interaction.original_message() # Guarda a mensagem para edi√ß√£o

    @nextcord.slash_command(guild_ids=[SERVER_ID], name="quote", description="Receba uma cita√ß√£o inspiradora aleat√≥ria.")
    async def quote(self, interaction: Interaction):
        """Exibe uma cita√ß√£o motivacional ou filos√≥fica aleat√≥ria."""
        embed = Embed(description=f"*‚Äú{random.choice(self.quotes)}‚Äù*

 color=Color.purple())
        await interaction.response.send_message(embed=embed)

    @nextcord.slash_command(guild_ids=[SERVER_ID], name="curiosidade", description="Receba uma curiosidade aleat√≥ria.")
    async def curiosidade(self, interaction: Interaction):
        """Exibe um fato interessante ou curioso aleat√≥rio."""
        embed = Embed(title=f"{EMOJI_QUESTION} Voc√™ Sabia?", description=random.choice(self.curiosidades), color=Color.teal())
        await interaction.response.send_message(embed=embed)

    @nextcord.slash_command(guild_ids=[SERVER_ID], name="sugestao", description="Envie uma sugest√£o para melhorar o bot.")
    async def sugestao(self, interaction: Interaction):
        """Abre um modal para o usu√°rio enviar uma sugest√£o detalhada."""
        await interaction.response.send_modal(SugestaoModal(SUGGESTIONS_CHANNEL_NAME))

    @nextcord.slash_command(guild_ids=[SERVER_ID], name="numero_aleatorio", description="Gera um n√∫mero aleat√≥rio entre dois valores.")
    async def numero_aleatorio(self, interaction: Interaction, 
                              minimo: int = SlashOption(description="Valor m√≠nimo", default=1), 
                              maximo: int = SlashOption(description="Valor m√°ximo", default=100)):
        """Gera um n√∫mero inteiro aleat√≥rio dentro de um intervalo especificado."""
        if minimo >= maximo:
            await interaction.response.send_message(f"{EMOJI_FAILURE} O valor m√≠nimo (`{minimo}`) deve ser estritamente menor que o valor m√°ximo (`{maximo}`).", ephemeral=True)
        else:
            resultado = random.randint(minimo, maximo)
            await interaction.response.send_message(f"üé≤ N√∫mero aleat√≥rio entre {minimo} e {maximo}: **{resultado}**")

    @nextcord.slash_command(guild_ids=[SERVER_ID], name="senha", description="Gera uma senha aleat√≥ria segura.")
    async def senha(self, interaction: Interaction, 
                   tamanho: int = SlashOption(description="Tamanho da senha", min_value=8, max_value=64, default=16),
                   incluir_maiusculas: bool = SlashOption(description="Incluir letras mai√∫sculas?", default=True),
                   incluir_numeros: bool = SlashOption(description="Incluir n√∫meros?", default=True),
                   incluir_simbolos: bool = SlashOption(description="Incluir s√≠mbolos?", default=True)):
        """Gera uma senha aleat√≥ria segura e a envia por mensagem ef√™mera."""
        caracteres = "abcdefghijklmnopqrstuvwxyz"
        if incluir_maiusculas:
            caracteres += "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        if incluir_numeros:
            caracteres += "0123456789"
        if incluir_simbolos:
            caracteres += "!@#$%^&*()-_=+[]{}\|;:",.<>/?~"
            
        if not caracteres:
             await interaction.response.send_message(f"{EMOJI_FAILURE} Voc√™ deve incluir pelo menos um tipo de caractere para gerar a senha!", ephemeral=True)
             return
             
        senha_gerada = ".join(secrets.choice(caracteres) for _ in range(tamanho))
        
        embed = Embed(title="üîê Senha Gerada", description=f"Sua senha segura de {tamanho} caracteres est√° abaixo:", color=Color.dark_grey())
        embed.add_field(name="Senha", value=f"`{senha_gerada}`")
        embed.set_footer(text="Esta mensagem √© vis√≠vel apenas para voc√™.")
        await interaction.response.send_message(embed=embed, ephemeral=True)

    @nextcord.slash_command(guild_ids=[SERVER_ID], name="contagem", description="Faz uma contagem regressiva no chat.")
    async def contagem(self, interaction: Interaction, segundos: int = SlashOption(description="Dura√ß√£o em segundos", min_value=1, max_value=10)):
        """Realiza uma contagem regressiva vis√≠vel no canal."""
        await interaction.response.defer()
        msg = await interaction.followup.send(f"‚è±Ô∏è Contagem regressiva iniciando em **{segundos}**...")
        
        for i in range(segundos, 0, -1):
            await asyncio.sleep(1)
            await msg.edit(content=f"‚è±Ô∏è **{i}**...")
            
        await asyncio.sleep(1)
        await msg.edit(content=f"{EMOJI_CELEBRATE} Contagem finalizada! {EMOJI_HAPPY}")

    @nextcord.slash_command(guild_ids=[SERVER_ID], name="github", description="Mostra informa√ß√µes de um reposit√≥rio do GitHub.")
    async def github(self, interaction: Interaction, repositorio: str = SlashOption(description="Nome do reposit√≥rio (ex: usuario/repo)")):
        """Busca e exibe informa√ß√µes sobre um reposit√≥rio p√∫blico no GitHub."""
        await interaction.response.defer()
        url = f"https://api.github.com/repos/{repositorio}"
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as r:
                    if r.status == 404:
                        await interaction.followup.send(f"{EMOJI_FAILURE} Reposit√≥rio `{repositorio}` n√£o encontrado ou privado.", ephemeral=True)
                        return
                    elif r.status != 200:
                        await interaction.followup.send(f"{EMOJI_FAILURE} Erro ao buscar informa√ß√µes do GitHub (Status: {r.status}). Tente novamente mais tarde.", ephemeral=True)
                        return
                        
                    data = await r.json()
                    embed = Embed(title=f"<:github:ID_EMOJI_GITHUB> {data["full_name"]}", description=data["description"] or "Sem descri√ß√£o.", url=data["html_url"], color=0x24292e) # Cor do GitHub
                    
                    embed.add_field(name="‚≠ê Estrelas", value=f"{data["stargazers_count"]:,}", inline=True)
                    embed.add_field(name="üç¥ Forks", value=f"{data["forks_count"]:,}", inline=True)
                    embed.add_field(name="üëÄ Observadores", value=f"{data["watchers_count"]:,}", inline=True)
                    embed.add_field(name="üîß Linguagem Principal", value=data["language"] or "N/A", inline=True)
                    embed.add_field(name="‚öñÔ∏è Licen√ßa", value=data["license"]["name"] if data.get("license") else "Nenhuma", inline=True)
                    embed.add_field(name="‚ö†Ô∏è Issues Abertas", value=f"{data["open_issues_count"]:,}", inline=True)
                    
                    created_ts = int(datetime.datetime.fromisoformat(data["created_at"].replace("Z", "+00:00")).timestamp())
                    updated_ts = int(datetime.datetime.fromisoformat(data["updated_at"].replace("Z", "+00:00")).timestamp())
                    embed.add_field(name="üìÖ Criado em", value=f"<t:{created_ts}:f> (<t:{created_ts}:R>)", inline=False)
                    embed.add_field(name="üîÑ √öltima Atualiza√ß√£o", value=f"<t:{updated_ts}:f> (<t:{updated_ts}:R>)", inline=False)
                    
                    if data.get("owner") and data["owner"].get("avatar_url"):
                        embed.set_thumbnail(url=data["owner"]["avatar_url"])
                        
                    embed.set_footer(text="Informa√ß√µes via API do GitHub")
                    await interaction.followup.send(embed=embed)
        except aiohttp.ClientError as e:
             await interaction.followup.send(f"{EMOJI_FAILURE} Erro de conex√£o ao buscar dados do GitHub: {e}", ephemeral=True)
        except Exception as e:
            print(f"[ERRO GitHub] {e}")
            await interaction.followup.send(f"{EMOJI_FAILURE} Ocorreu um erro inesperado ao buscar informa√ß√µes do reposit√≥rio.", ephemeral=True)

    @nextcord.slash_command(guild_ids=[SERVER_ID], name="qrcode", description="Gera um QR Code para um texto ou link.")
    async def qrcode_cmd(self, interaction: Interaction, data: str = SlashOption(description="O texto ou link para gerar o QR Code")):
        """Cria uma imagem de QR Code a partir do texto fornecido."""
        await interaction.response.defer()
        try:
            qr = qrcode.QRCode(
                version=1,
                error_correction=qrcode.constants.ERROR_CORRECT_L,
                box_size=10,
                border=4,
            )
            qr.add_data(data)
            qr.make(fit=True)

            img = qr.make_image(fill_color="black", back_color="white")
            
            # Salva a imagem em um buffer de bytes
            buffer = BytesIO()
            img.save(buffer, "PNG")
            buffer.seek(0)
            
            file = File(buffer, filename="qrcode.png")
            embed = Embed(title=" Gera√ß√£o de QR Code", color=Color.dark_blue())
            embed.description = f"QR Code gerado para: `{data}`"
            embed.set_image(url="attachment://qrcode.png")
            embed.set_footer(text=f"Solicitado por {interaction.user.display_name}")
            
            await interaction.followup.send(embed=embed, file=file)
        except Exception as e:
            print(f"[ERRO QRCode] {e}")
            await interaction.followup.send(f"{EMOJI_FAILURE} Ocorreu um erro ao gerar o QR Code.", ephemeral=True)

    # --- Adicionar mais utilit√°rios ---
    # - Tradutor (requer API ou biblioteca robusta)
    # - Dicion√°rio
    # - Conversor de unidades (moeda, temperatura, etc.)
    # - Pesquisa de imagens
    # - Lembrete peri√≥dico (ex: a cada X horas)
    # - Sorteio

# Fun√ß√£o setup para carregar a cog
def setup(bot):
    """Adiciona a cog Utilitarios ao bot."""
    # Instalar depend√™ncias se necess√°rio (ex: qrcode, pytz)
    # Idealmente, isso estaria no requirements.txt
    try:
        import qrcode
        import pytz
    except ImportError:
        print("[ALERTA] Depend√™ncias `qrcode` ou `pytz` n√£o encontradas. Instale-as com `pip install qrcode[pil] pytz` para funcionalidade completa da cog Utilitarios.")
        # Poderia tentar instalar aqui, mas √© melhor gerenciar pelo requirements.txt
        # os.system("pip install qrcode[pil] pytz") 
    bot.add_cog(Utilitarios(bot))
