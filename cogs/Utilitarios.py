import os
import random
import secrets
import math
import asyncio
import aiohttp
import nextcord
from nextcord import Interaction, Embed, SlashOption
from nextcord.ext import commands
from nextcord import ui

class SugestaoModal(ui.Modal):
    def __init__(self):
        super().__init__("Sugest√£o para o bot")
        self.titulo = ui.TextInput(label="T√≠tulo da sugest√£o", placeholder="Digite aqui...", required=True, max_length=100)
        self.descricao = ui.TextInput(label="Descri√ß√£o", style=nextcord.TextInputStyle.paragraph, placeholder="Explique sua sugest√£o", required=True, max_length=300)
        self.add_item(self.titulo)
        self.add_item(self.descricao)

    async def callback(self, interaction: Interaction):
        embed = Embed(title="üì© Nova Sugest√£o Recebida", color=0x2ecc71)
        embed.add_field(name="T√≠tulo", value=self.titulo.value, inline=False)
        embed.add_field(name="Descri√ß√£o", value=self.descricao.value, inline=False)
        embed.set_footer(text=f"Enviado por {interaction.user}")
        await interaction.response.send_message("Sugest√£o enviada com sucesso!", ephemeral=True)
        canal_logs = nextcord.utils.get(interaction.guild.text_channels, name="sugestoes")
        if canal_logs:
            await canal_logs.send(embed=embed)
        else:
            # Enviar para o canal atual se o canal de sugest√µes n√£o existir
            await interaction.channel.send("‚ö†Ô∏è Canal #sugestoes n√£o encontrado. Criando sugest√£o aqui:", embed=embed)

class EnqueteView(ui.View):
    def __init__(self, opcoes_lista):
        super().__init__(timeout=None)
        self.votos = {i: 0 for i in range(len(opcoes_lista))}
        self.opcoes = opcoes_lista
        self.votantes = set()
        
        # Adicionar bot√µes com callbacks conectados corretamente
        for i, opcao in enumerate(opcoes_lista):
            button = ui.Button(label=opcao, custom_id=f"vote_{i}")
            button.callback = self.create_callback(i)
            self.add_item(button)
            
    def create_callback(self, index):
        async def callback(interaction: Interaction):
            # Verificar se o usu√°rio j√° votou
            if interaction.user.id in self.votantes:
                await interaction.response.send_message("Voc√™ j√° votou nesta enquete!", ephemeral=True)
                return
                
            # Registrar voto
            self.votos[index] += 1
            self.votantes.add(interaction.user.id)
            
            await interaction.response.send_message(f"‚úÖ Voto computado para: **{self.opcoes[index]}**", ephemeral=True)
            
        return callback

class Utilitarios(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.quotes = [  # 25 cita√ß√µes
            "A persist√™ncia realiza o imposs√≠vel.",
            "O sucesso √© a soma de pequenos esfor√ßos repetidos todos os dias.",
            "N√£o sabendo que era imposs√≠vel, foi l√° e fez.",
            "Coragem √© resist√™ncia ao medo, dom√≠nio do medo, e n√£o aus√™ncia do medo.",
            "Grandes mentes discutem ideias; mentes medianas discutem eventos; mentes pequenas discutem pessoas.",
            "Seja a mudan√ßa que voc√™ quer ver no mundo.",
            "A vida √© 10% o que acontece com voc√™ e 90% como voc√™ reage.",
            "A melhor maneira de prever o futuro √© cri√°-lo.",
            "Voc√™ nunca ser√° velho demais para definir outro objetivo ou sonhar um novo sonho.",
            "A mente que se abre a uma nova ideia jamais voltar√° ao seu tamanho original.",
            "Tudo o que um sonho precisa para ser realizado √© algu√©m que acredite que ele possa ser realizado.",
            "S√≥ se pode alcan√ßar um grande √™xito quando nos mantemos fi√©is a n√≥s mesmos.",
            "O sucesso nasce do querer, da determina√ß√£o e persist√™ncia em se chegar a um objetivo.",
            "A √∫nica maneira de fazer um excelente trabalho √© amar o que voc√™ faz.",
            "Voc√™ √© mais forte do que pensa.",
            "Acredite no seu potencial.",
            "A sua √∫nica limita√ß√£o √© aquela que voc√™ aceita.",
            "Transforme seus obst√°culos em aprendizado.",
            "N√£o pare at√© se orgulhar.",
            "Desistir n√£o √© uma op√ß√£o.",
            "O melhor ainda est√° por vir.",
            "Voc√™ est√° exatamente onde precisa estar.",
            "Pequenos passos tamb√©m te levam ao destino.",
            "A a√ß√£o √© o ant√≠doto do medo.",
            "Voc√™ n√£o precisa ser perfeito, s√≥ persistente."
        ]
        self.curiosidades = [  # 25 curiosidades
            "Polvos t√™m tr√™s cora√ß√µes e sangue azul.",
            "O corpo humano brilha no escuro (mas nossos olhos n√£o percebem).",
            "O mel nunca estraga.",
            "Bananas s√£o tecnicamente frutas vermelhas.",
            "Existem mais estrelas no universo do que gr√£os de areia na Terra.",
            "Os cavalos-marinhos s√£o os √∫nicos animais onde os machos engravidam.",
            "A Terra n√£o √© perfeitamente redonda.",
            "Formigas n√£o dormem.",
            "O c√©rebro humano √© mais ativo √† noite do que durante o dia.",
            "O DNA humano e o da banana s√£o 60% parecidos.",
            "Os flamingos nascem cinzas.",
            "O tubar√£o √© mais velho que as √°rvores.",
            "Existe um tipo de √°gua viva imortal.",
            "O corpo humano tem ouro (em pequenas quantidades).",
            "O nariz humano pode detectar mais de 1 trilh√£o de odores.",
            "As abelhas podem reconhecer rostos humanos.",
            "Cada pessoa tem uma impress√£o de l√≠ngua √∫nica.",
            "A Lua j√° teve atmosfera.",
            "O sol representa 99,86% da massa do sistema solar.",
            "O kiwi √© uma ave, n√£o s√≥ uma fruta.",
            "O dia em V√™nus √© mais longo que o ano.",
            "Os olhos da lula gigante s√£o do tamanho de bolas de basquete.",
            "Existe uma ilha dentro de um lago dentro de uma ilha dentro de um lago dentro de uma ilha.",
            "Os drag√µes-de-komodo podem se reproduzir sem acasalamento.",
            "O calor do n√∫cleo da Terra √© t√£o intenso quanto a superf√≠cie do Sol."
        ]

    @commands.slash_command(name="calculadora", description="Resolve uma express√£o matem√°tica b√°sica.")
    async def calculadora(self, interaction: Interaction, expressao: str):
        # Usar uma abordagem mais segura que eval()
        try:
            # Lista de opera√ß√µes permitidas
            allowed_names = {
                'abs': abs, 'round': round,
                'min': min, 'max': max,
                'sum': sum
            }
            
            # Adicionar fun√ß√µes matem√°ticas seguras
            for name in dir(math):
                if not name.startswith('_'):
                    allowed_names[name] = getattr(math, name)
                    
            # Compilar a express√£o com restri√ß√µes
            code = compile(expressao, "<string>", "eval")
            
            # Verificar se h√° nomes n√£o permitidos
            for name in code.co_names:
                if name not in allowed_names:
                    raise NameError(f"O uso de '{name}' n√£o √© permitido")
                    
            # Avaliar a express√£o com o dicion√°rio restrito
            resultado = eval(code, {"__builtins__": {}}, allowed_names)
            await interaction.response.send_message(f"üßÆ Resultado: `{resultado}`")
        except Exception as e:
            await interaction.response.send_message(f"‚ùå Express√£o inv√°lida: {str(e)}")

    @commands.slash_command(name="clima", description="Mostra o clima atual de uma cidade.")
    async def clima(self, interaction: Interaction, cidade: str):
        api_key = os.getenv("OPENWEATHER_API")
        if not api_key:
            await interaction.response.send_message("‚ùå API de clima n√£o configurada.")
            return
            
        await interaction.response.defer()  # Adicionado para opera√ß√µes que podem demorar
        
        try:
            url = f"https://api.openweathermap.org/data/2.5/weather?q={cidade}&appid={api_key}&units=metric&lang=pt_br"
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as r:
                    if r.status != 200:
                        await interaction.followup.send("Cidade n√£o encontrada.")
                        return
                        
                    data = await r.json()
                    embed = Embed(title=f"üå§Ô∏è Clima em {cidade.title()}", color=0x3498db)
                    embed.add_field(name="Temperatura", value=f"{data['main']['temp']}¬∞C")
                    embed.add_field(name="Sensa√ß√£o", value=f"{data['main']['feels_like']}¬∞C")
                    embed.add_field(name="Descri√ß√£o", value=data['weather'][0]['description'].capitalize())
                    embed.add_field(name="Umidade", value=f"{data['main']['humidity']}%")
                    embed.add_field(name="Vento", value=f"{data['wind']['speed']} m/s")
                    
                    # Adicionar √≠cone do clima
                    icon_code = data['weather'][0]['icon']
                    embed.set_thumbnail(url=f"http://openweathermap.org/img/wn/{icon_code}@2x.png")
                    
                    await interaction.followup.send(embed=embed)
        except Exception as e:
            await interaction.followup.send(f"‚ùå Erro ao buscar clima: {str(e)}")

    @commands.slash_command(name="dado", description="Rola um dado com X lados")
    async def dado(self, interaction: Interaction, lados: int = SlashOption(description="N√∫mero de lados do dado", min_value=2, max_value=1000, default=6)):
        numero = random.randint(1, lados)
        await interaction.response.send_message(f"üé≤ Voc√™ rolou um d{lados}: **{numero}**")

    @commands.slash_command(name="cronometro", description="Inicia um cron√¥metro temporizado")
    async def cronometro(self, interaction: Interaction, segundos: int = SlashOption(description="Dura√ß√£o em segundos", min_value=1, max_value=300)):
        if segundos > 60:
            await interaction.response.send_message(f"‚è±Ô∏è Cron√¥metro iniciado por {segundos}s... Voc√™ ser√° notificado quando terminar.", ephemeral=True)
        else:
            await interaction.response.send_message(f"‚è±Ô∏è Cron√¥metro iniciado por {segundos}s...")
            
        await asyncio.sleep(segundos)
        
        try:
            await interaction.followup.send(f"‚è∞ <@{interaction.user.id}> Tempo encerrado!")
        except Exception as e:
            print(f"Erro ao enviar notifica√ß√£o de cron√¥metro: {e}")

    @commands.slash_command(name="enquete", description="Cria uma enquete com at√© 5 op√ß√µes")
    async def enquete(self, interaction: Interaction, pergunta: str, opcoes: str):
        opcoes_lista = [x.strip() for x in opcoes.split(",")][:5]
        if len(opcoes_lista) < 2:
            await interaction.response.send_message("Voc√™ precisa de pelo menos duas op√ß√µes.", ephemeral=True)
            return
            
        embed = Embed(title="üìä Enquete", description=pergunta, color=0xf1c40f)
        for i, opcao in enumerate(opcoes_lista):
            embed.add_field(name=f"Op√ß√£o {i+1}", value=opcao, inline=False)
            
        view = EnqueteView(opcoes_lista)
        await interaction.response.send_message(embed=embed, view=view)

    @commands.slash_command(name="quote", description="Receba uma cita√ß√£o aleat√≥ria")
    async def quote(self, interaction: Interaction):
        await interaction.response.send_message(f"üìú *{random.choice(self.quotes)}*")

    @commands.slash_command(name="curiosidade", description="Veja uma curiosidade aleat√≥ria")
    async def curiosidade(self, interaction: Interaction):
        await interaction.response.send_message(f"üß† {random.choice(self.curiosidades)}")

    @commands.slash_command(name="sugestao", description="Envie uma sugest√£o para o bot")
    async def sugestao(self, interaction: Interaction):
        await interaction.response.send_modal(SugestaoModal())

    @commands.slash_command(name="numero_aleatorio", description="Gera um n√∫mero entre dois valores")
    async def numero_aleatorio(self, interaction: Interaction, 
                              minimo: int = SlashOption(description="Valor m√≠nimo", default=1), 
                              maximo: int = SlashOption(description="Valor m√°ximo", default=100)):
        if minimo >= maximo:
            await interaction.response.send_message("‚ö†Ô∏è O m√≠nimo deve ser menor que o m√°ximo.", ephemeral=True)
        else:
            await interaction.response.send_message(f"üé≤ N√∫mero gerado: **{random.randint(minimo, maximo)}**")

    @commands.slash_command(name="senha", description="Gera uma senha aleat√≥ria segura")
    async def senha(self, interaction: Interaction, 
                   tamanho: int = SlashOption(description="Tamanho da senha", min_value=4, max_value=32, default=12),
                   incluir_maiusculas: bool = SlashOption(description="Incluir letras mai√∫sculas", default=True),
                   incluir_numeros: bool = SlashOption(description="Incluir n√∫meros", default=True),
                   incluir_simbolos: bool = SlashOption(description="Incluir s√≠mbolos", default=True)):
        # Construir conjunto de caracteres com base nas op√ß√µes
        caracteres = "abcdefghijklmnopqrstuvwxyz"
        if incluir_maiusculas:
            caracteres += "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        if incluir_numeros:
            caracteres += "0123456789"
        if incluir_simbolos:
            caracteres += "!@#$%^&*()-_=+[]{}|;:,.<>?"
            
        # Gerar senha
        senha = ''.join(secrets.choice(caracteres) for _ in range(tamanho))
        
        # Enviar como mensagem ef√™mera para maior seguran√ßa
        await interaction.response.send_message(f"üîê Sua senha gerada: `{senha}`", ephemeral=True)

    @commands.slash_command(name="contagem", description="Faz uma contagem regressiva")
    async def contagem(self, interaction: Interaction, segundos: int = SlashOption(description="Dura√ß√£o em segundos", min_value=1, max_value=15)):
        await interaction.response.defer()
        msg = await interaction.followup.send(f"‚è±Ô∏è Contagem iniciada: {segundos}s")
        
        for i in range(segundos - 1, 0, -1):
            await asyncio.sleep(1)
            await msg.edit(content=f"‚è±Ô∏è {i}s...")
            
        await asyncio.sleep(1)
        await msg.edit(content="üéâ Tempo encerrado!")

    @commands.slash_command(name="github", description="Mostra info de um reposit√≥rio do GitHub")
    async def github(self, interaction: Interaction, repositorio: str):
        await interaction.response.defer()
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"https://api.github.com/repos/{repositorio}") as r:
                    if r.status != 200:
                        await interaction.followup.send("‚ùå Reposit√≥rio n√£o encontrado.")
                        return
                        
                    data = await r.json()
                    embed = Embed(title=data['full_name'], description=data['description'], url=data['html_url'], color=0x3333ff)
                    
                    # Adicionar mais informa√ß√µes √∫teis
                    embed.add_field(name="‚≠ê Stars", value=data['stargazers_count'])
                    embed.add_field(name="üîÄ Forks", value=data['forks_count'])
                    embed.add_field(name="üëÄ Watchers", value=data['watchers_count'])
                    embed.add_field(name="üîß Linguagem", value=data['language'] or "N/A")
                    embed.add_field(name="üîÑ √öltima atualiza√ß√£o", value=data['updated_at'].split('T')[0])
                    
                    # Adicionar avatar do dono
                    if 'owner' in data and 'avatar_url' in data['owner']:
                        embed.set_thumbnail(url=data['owner']['avatar_url'])
                        
                    embed.set_footer(text="GitHub")
                    await interaction.followup.send(embed=embed)
        except Exception as e:
            await interaction.followup.send(f"‚ùå Erro ao buscar informa√ß√µes: {str(e)}")

    # Novo comando para tradu√ß√£o
    @commands.slash_command(name="traduzir", description="Traduz um texto para outro idioma")
    async def traduzir(self, interaction: Interaction, texto: str, idioma: str = SlashOption(
        description="Idioma de destino",
        choices={"Ingl√™s": "en", "Espanhol": "es", "Franc√™s": "fr", "Alem√£o": "de", "Italiano": "it", "Japon√™s": "ja"}
    )):
        await interaction.response.defer()
        
        try:
            api_key = os.getenv("TRANSLATION_API")
            if not api_key:
                # Simula√ß√£o de tradu√ß√£o para demonstra√ß√£o (em produ√ß√£o, use uma API real)
                traducoes = {
                    "en": "This is a simulated translation (English)",
                    "es": "Esta es una traducci√≥n simulada (Espa√±ol)",
                    "fr": "Ceci est une traduction simul√©e (Fran√ßais)",
                    "de": "Dies ist eine simulierte √úbersetzung (Deutsch)",
                    "it": "Questa √® una traduzione simulata (Italiano)",
                    "ja": "„Åì„Çå„ÅØ„Ç∑„Éü„É•„É¨„Éº„Éà„Åï„Çå„ÅüÁøªË®≥„Åß„Åô (Êó•Êú¨Ë™û)"
                }
                traducao = traducoes.get(idioma, "Tradu√ß√£o simulada")
                await interaction.followup.send(f"‚ö†Ô∏è API de tradu√ß√£o n√£o configurada. Usando simula√ß√£o:\n\n{traducao}")
            else:
                # Aqui voc√™ implementaria a chamada real para a API de tradu√ß√£o
                await interaction.followup.send(f"üåê Texto traduzido para {idioma}:\n\n{texto} (tradu√ß√£o simulada)")
        except Exception as e:
            await interaction.followup.send(f"‚ùå Erro ao traduzir: {str(e)}")

def setup(bot):
    bot.add_cog(Utilitarios(bot))
