import nextcord
import os
import asyncio
import traceback
import wavelink
from nextcord.ext import commands
from dotenv import load_dotenv
from keep_alive import keep_alive # <-- Adicionado import

print("--- Iniciando Bot ---")

# Verifica se wavelink.ext.spotify est√° dispon√≠vel
try:
    # Tenta importar algo espec√≠fico do m√≥dulo
    from wavelink.ext import spotify
    # Se chegou aqui, o m√≥dulo existe, mas n√£o vamos us√°-lo diretamente
    print("‚ö†Ô∏è AVISO: M√≥dulo 'wavelink.ext.spotify' encontrado, mas a integra√ß√£o direta est√° desativada. Use LavaSrc no Lavalink.")
    # Definir spotify_client como None para evitar erros posteriores se o c√≥digo antigo ainda o referenciar
    spotify_client = None
except ImportError:
    # Se falhar, o m√≥dulo n√£o est√° instalado ou dispon√≠vel
    print("‚ö†Ô∏è AVISO: M√≥dulo 'wavelink.ext' n√£o encontrado. A integra√ß√£o com Spotify estar√° desativada.")
    spotify_client = None # Garante que a vari√°vel exista como None
except Exception as e:
    print(f"‚ùå Erro inesperado ao verificar 'wavelink.ext.spotify': {e}")
    spotify_client = None

print("-> Carregando vari√°veis de ambiente...")
# Carrega as vari√°veis de ambiente do arquivo .env
load_dotenv()
token = os.getenv("DISCORD_TOKEN")
uri = os.getenv("LAVALINK_URI")
password = os.getenv("LAVALINK_PASSWORD")

if not token:
    print("‚ùå CR√çTICO: Token do Discord n√£o encontrado nas vari√°veis de ambiente.")
    exit()
if not uri:
    print("‚ö†Ô∏è AVISO: URI do Lavalink n√£o encontrada. Funcionalidades de m√∫sica podem n√£o funcionar.")
if not password:
    print("‚ö†Ô∏è AVISO: Senha do Lavalink n√£o encontrada. Funcionalidades de m√∫sica podem n√£o funcionar.")

print("-> Vari√°veis de ambiente carregadas.")

print("-> Configurando Intents...")
# Define as intents necess√°rias para o bot
intents = nextcord.Intents.default()
intents.message_content = True # Necess√°rio para ler o conte√∫do das mensagens (se aplic√°vel)
intents.voice_states = True    # Necess√°rio para gerenciar estados de voz
intents.guilds = True          # Necess√°rio para informa√ß√µes da guilda
print("-> Intents configuradas.")

print("-> Inicializando o Bot...")
# Define a classe principal do bot, herdando de commands.Bot
class MusicBot(commands.Bot):
    def __init__(self, *args, **kwargs):
        print("--- [DIAGN√ìSTICO] Iniciando __init__ da classe MusicBot ---")
        super().__init__(*args, **kwargs)
        self.loop.create_task(self.setup_hook()) # Chama setup_hook na inicializa√ß√£o
        print("--- [DIAGN√ìSTICO] __init__ da classe MusicBot conclu√≠do ---")

    async def setup_hook(self) -> None:
        """Inicializa o n√≥ Lavalink e carrega os cogs."""
        print("--- [DIAGN√ìSTICO] Iniciando setup_hook ---")
        try:
            if uri and password:
                print("--- [DIAGN√ìSTICO] Tentando conectar n√≥s Lavalink ---")
                node: wavelink.Node = wavelink.Node(uri=uri, password=password)
                # N√£o passamos mais spotify_client aqui
                await wavelink.Pool.connect(nodes=[node], client=self)
                print("--- [DIAGN√ìSTICO] Conex√£o com Lavalink iniciada (aguardando on_wavelink_node_ready) ---")
            else:
                print("--- [DIAGN√ìSTICO] URI ou senha do Lavalink ausentes. Pulando conex√£o com Lavalink. ---")

            print("--- [DIAGN√ìSTICO] Iniciando carregamento de cogs em setup_hook ---")
            await self.load_cogs()
            print("--- [DIAGN√ìSTICO] Carregamento de cogs conclu√≠do em setup_hook ---")

        except Exception as e:
            print(f"‚ùå CR√çTICO: Erro durante o setup_hook:")
            traceback.print_exc()
            print("‚ö†Ô∏è O bot pode n√£o funcionar corretamente devido ao erro no setup_hook.")
        print("--- [DIAGN√ìSTICO] setup_hook conclu√≠do (ou falhou) ---")

    async def load_cogs(self):
        print("--- Carregando COGs (via setup_hook) ---")
        cogs_dir = "cogs"
        cogs_loaded = []
        cogs_failed = []
        cog_files = []

        if not os.path.isdir(cogs_dir):
            print(f"‚ö†Ô∏è Diret√≥rio '{cogs_dir}' n√£o encontrado. Nenhum cog ser√° carregado.")
            return

        for filename in os.listdir(cogs_dir):
            if filename.endswith(".py") and not filename.startswith("__"):
                cog_path = f"{cogs_dir}.{filename[:-3]}"
                cog_files.append(cog_path)
                print(f"--> Tentando carregar: {cog_path}")
                try:
                    self.load_extension(cog_path)
                    # Verifica se a extens√£o realmente tem um comando setup
                    # (Nota: load_extension j√° faz isso implicitamente, mas podemos ser expl√≠citos)
                    # ext = self.get_cog(cog_path.split('.')[-1]) # Pega o nome da classe
                    # if ext is None or not hasattr(ext, 'setup'):
                    #     print(f"‚ö†Ô∏è Aviso: {filename} carregado, mas n√£o parece ter uma fun√ß√£o 'setup'.")
                    #     cogs_failed.append(f"{filename} (sem setup)")
                    # else:
                    print(f"‚úÖ {filename} carregado com sucesso.")
                    cogs_loaded.append(filename)

                except commands.errors.NoEntryPointError:
                    print(f"‚ö†Ô∏è Aviso: {filename} n√£o possui uma fun√ß√£o 'setup'. Pulando.")
                    cogs_failed.append(f"{filename} (sem setup)")
                except commands.errors.ExtensionAlreadyLoaded:
                    print(f"‚ö†Ô∏è Aviso: {filename} j√° estava carregado.")
                    cogs_loaded.append(filename)
                except Exception as e:
                    print(f"‚ùå Erro ao carregar {filename}:")
                    traceback.print_exc()
                    cogs_failed.append(f"{filename} ({type(e).__name__})")
                    print(f"‚ö†Ô∏è Ignorando erro e continuando com os pr√≥ximos cogs...")

        loaded_extensions = list(self.extensions.keys())
        print(f"\n=== RESUMO DO CARREGAMENTO DE COGS ===")
        print(f"-> Total de cogs encontrados: {len(cog_files)}")
        print(f"-> Cogs carregados com sucesso ({len(cogs_loaded)}): {', '.join(cogs_loaded) if cogs_loaded else 'Nenhum'}")
        print(f"-> Cogs que falharam ({len(cogs_failed)}): {', '.join(cogs_failed) if cogs_failed else 'Nenhum'}")
        print(f"-> Extens√µes ativas ({len(loaded_extensions)}): {', '.join(loaded_extensions) if loaded_extensions else 'Nenhuma'}")
        print("=== FIM DO RESUMO ===\n")

bot = MusicBot(command_prefix="!", intents=intents)
print("-> Bot instanciado.")

@bot.event
async def on_ready():
    print(f"\n‚úÖ {bot.user.name} est√° online e pronto!")
    # A sincroniza√ß√£o de comandos pode ser movida para setup_hook tamb√©m, mas on_ready ainda funciona.
    print("-> Sincroniza√ß√£o de comandos slash TEMPORARIAMENTE DESATIVADA para teste.")
    # print("-> Tentando sincronizar comandos slash em on_ready...")
    # try:
    #     synced = await bot.sync_application_commands()
    #     if synced is not None:
    #         print(f"üîÑ Comandos slash sincronizados: {len(synced)} comandos")
    #     else:
    #         print("‚ö†Ô∏è A sincroniza√ß√£o retornou None. Verifique se h√° comandos para sincronizar.")
    # # Adicionar tratamento espec√≠fico para NotFound (Unknown application command)
    # except nextcord.errors.NotFound as e:
    #     print(f"‚ö†Ô∏è Erro 404 durante sincroniza√ß√£o (Comando desconhecido ignorado): {e}")
    #     print("‚ö†Ô∏è O bot continuar√° funcionando, mas pode haver comandos antigos n√£o removidos.")
    # except Exception as e:
    #     print(f"‚ùå Erro ao sincronizar comandos slash:")
    #     traceback.print_exc()
    #     print("‚ö†Ô∏è O bot continuar√° funcionando, mas os comandos slash podem n√£o estar dispon√≠veis.")
    # print("-> Sincroniza√ß√£o de comandos conclu√≠da (ou falhou).")

# Evento Wavelink para status do n√≥
@bot.event
async def on_wavelink_node_ready(payload: wavelink.NodeReadyEventPayload):
    # Este evento √© crucial para saber quando o n√≥ est√° realmente pronto.
    node = payload.node
    session_id = payload.session_id
    print(f"‚úÖ N√≥ Lavalink '{node.identifier}' (Sess√£o: {session_id}) est√° pronto e conectado!")

# REMOVIDO: Evento on_wavelink_node_disconnected (causando AttributeError)

# O carregamento de COGs foi movido para setup_hook

# Inicia o servidor keep alive em background
keep_alive() # <-- Adicionada chamada

# Executa o bot
print("-> Iniciando execu√ß√£o do bot com o token...")
print("--- [DIAGN√ìSTICO] Antes de bot.run() ---")
try:
    bot.run(token)
except nextcord.errors.LoginFailure:
    print("‚ùå CR√çTICO: Falha no login - Token inv√°lido. Verifique seu token.")
except Exception as e:
    print("‚ùå Erro cr√≠tico durante a execu√ß√£o do bot:")
    traceback.print_exc()
finally:
    print("--- [DIAGN√ìSTICO] Ap√≥s bot.run() (no finally) ---")
    print("--- Bot encerrado ---")
