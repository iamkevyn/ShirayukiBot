# /home/ubuntu/jsbot/main.py
import os
import nextcord
from nextcord.ext import commands
from dotenv import load_dotenv
import traceback  # Importar o m√≥dulo traceback
import sys # Para sys.exit em caso de erro cr√≠tico

print("--- Iniciando Bot ---")

# Se estiver usando Replit ou Railway com webserver opcional:
try:
    from keep_alive import keep_alive
    print("-> Tentando iniciar keep_alive...")
    keep_alive()
    print("-> keep_alive iniciado (se aplic√°vel).")
except ImportError:
    print("-> M√≥dulo 'keep_alive' n√£o encontrado, ignorando...")
except Exception as e:
    print("‚ùå Erro ao iniciar keep_alive:")
    traceback.print_exc()

# Carregar vari√°veis de ambiente do .env
print("-> Carregando vari√°veis de ambiente...")
load_dotenv()
token = os.getenv("DISCORD_TOKEN")
if not token:
    print("‚ùå CR√çTICO: Token do bot n√£o encontrado! Verifique seu arquivo .env ou as vari√°veis de ambiente no Railway.")
    sys.exit(1) # Parar execu√ß√£o se o token n√£o for encontrado
print("-> Vari√°veis de ambiente carregadas.")

# Intents recomendadas
print("-> Configurando Intents...")
intents = nextcord.Intents.default()
intents.message_content = True
intents.guilds = True
intents.members = True
intents.voice_states = True
print("-> Intents configuradas.")

# Inicializa o bot
print("-> Inicializando o Bot...")
bot = commands.Bot(command_prefix="!", intents=intents)
print("-> Bot inicializado.")

@bot.event
async def on_ready():
    print(f"\n‚úÖ {bot.user.name} est√° online e pronto!")
    print("-> Tentando sincronizar comandos slash...")
    try:
        # Sincronizar comandos
        synced = await bot.sync_application_commands()
        if synced is not None:
            print(f"üîÑ Comandos slash sincronizados: {len(synced)} comandos")
            # Opcional: Listar comandos sincronizados
            # for cmd in synced:
            #     print(f"    - {cmd.name} (ID: {cmd.id})")
        else:
            print("‚ö†Ô∏è  A sincroniza√ß√£o retornou None. Verifique se h√° comandos para sincronizar.")
    except Exception as e:
        print(f"‚ùå Erro CR√çTICO ao sincronizar comandos slash:")
        traceback.print_exc() # Imprimir traceback completo do erro de sincroniza√ß√£o
    print("-> Sincroniza√ß√£o de comandos conclu√≠da (ou falhou).")

# Carrega os COGs da pasta 'cogs'
print("\n--- Carregando COGs ---")
cogs_dir = "./cogs"
if not os.path.isdir(cogs_dir):
    print(f"‚ùå Erro: Diret√≥rio de COGs '{cogs_dir}' n√£o encontrado.")
else:
    cog_files = [f for f in os.listdir(cogs_dir) if f.endswith(".py") and not f.startswith("__")]
    print(f"-> Encontrados {len(cog_files)} arquivos .py em '{cogs_dir}'")
    for filename in cog_files:
        cog_path = f"cogs.{filename[:-3]}"
        print(f"--> Tentando carregar: {cog_path}")
        try:
            bot.load_extension(cog_path)
            print(f"‚úÖ COG carregado com sucesso: {filename}")
        except commands.errors.NoEntryPointError:
             print(f"‚ö†Ô∏è  Aviso: {filename} n√£o possui a fun√ß√£o setup() e n√£o pode ser carregado como cog.")
        except commands.errors.ExtensionAlreadyLoaded:
            print(f"‚ö†Ô∏è  Aviso: {filename} j√° estava carregado.")
        except Exception as e:
            print(f"‚ùå Erro ao carregar {filename}:")
            traceback.print_exc() # Imprimir traceback completo do erro

# Verificar extens√µes carregadas
loaded_extensions = list(bot.extensions.keys())
print(f"\n-> Extens√µes carregadas ({len(loaded_extensions)}): {', '.join(loaded_extensions) if loaded_extensions else 'Nenhuma'}")
print("--- Fim do carregamento de COGs ---\n")

# Executa o bot
print("-> Iniciando execu√ß√£o do bot com o token...")
try:
    bot.run(token)
except nextcord.errors.LoginFailure:
    print("‚ùå CR√çTICO: Falha no login - Token inv√°lido. Verifique seu token.")
except Exception as e:
    print("‚ùå Erro cr√≠tico durante a execu√ß√£o do bot:")
    traceback.print_exc()
finally:
    print("--- Bot encerrado ---")
